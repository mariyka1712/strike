rest(1) -- generate HTTP(S) requests
=============================================

## SYNOPSIS

`rest` command [<options>...] <url><br>

## DESCRIPTION

**rest** generates HTTP(S) requests using the http(3) module which wraps curl(1). The core commands correspond to the HTTP verbs GET, POST, PUT, HEAD, DELETE and OPTIONS.

## FILES

The http(3) module generates some temporary files and files used for logging purposes and command persistence.

## COMMANDS

The rest(1) program expects the first option to be a command, below is the list of available commands:

* `get`:
	Perform a GET request:
	
	`rest get google.com`
	
* `head`:
	Perform a HEAD request:

	`rest head google.com`
	
	Note that this command does not use the `--request HEAD` option as curl(1) tends to hang when using the HEAD verb, instead this command uses the `--head` option along with a GET request method.
	
* `post`:
	Perform a POST request:

	`rest post --json '{"name":"value"}' google.com`
	
* `put`:
	Perform a PUT request:

	`rest put --json '{"name":"value"}' google.com`
	
* `delete`:
	Perform a DELETE request:

	`rest delete google.com`
	
* `dl`:
	Download a file:

	`rest dl google.com/index.html`
	
* `redo`:
	Repeat the last request:

	`rest redo`
	
* `load` `<name>`:
	Loads and executes a previously saved configuration file:

	`rest get --save google google.com`<br>
	`rest load google`	
	
* `clean`:
	Remove files generated by the last request:

	`rest clean`
	
* `config`:
	Print the contents of the `http.config` file:

	`rest config`

## OPTIONS

Wherever possible **rest** follows the command line options available to curl(1) but also adds some convenient shortcut options.

* `--type`:
	Set the content type for the request.

* `-H`, `--header`:
	Set a request header.
	
* `-d`, `--data`:
	Data to send with the request, see curl(1) for more information.
	
* `--json`:
	Sends data using the `--data-binary` option and adds a *content-type* of **application/json**.
	
* `--xml`:
	Sends data using the `--data-binary` option and adds a *content-type* of **text/xml**.
	
* `--param` `<name>` `<value>`:
	Add a URL query string parameter, repeatable. The `<value>` should *not* be URL-encoded.
	
* `--save` `<name>`:
	Saves a configuration file into `.http/config` with the specified name. This configuration file may then later be executed using the `load` command.
	
### PRINT OPTIONS

The `--print-*` options control what is output after a request has been made.

* `--print-body`:
	Print the body of the response.
	
* `--print-headers`:
	Print all response headers.
	
* `--print-env`:
	Print all `http_*` variables. This print output option outputs the variables in a `name=value` format with the values quoted using printf(1). This allows redirection of the output to a file that could later be included using source(1). For example:

	rest get --print-env google.com > http.vars;<br>
	source http.vars;

## BUGS

**rest** is written in bash and depends upon `bash` >= 4.

* `--print-env`:
	The output of this option does not output array values correctly, only the first array entry is available.

## COPYRIGHT

**rest** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

curl(1)

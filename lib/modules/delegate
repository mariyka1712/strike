: <<'ronn:markdown'
delegate(3) -- method delegation
=============================================

## SYNOPSIS

Provides the main delegate entry point for programs that wish to map command options to method invocations and provides modules with a default delegate where no main module method has been declared.

## DESCRIPTION

A module may declare a `main` method which should have the same name as the module. The require(3) module is a good example of a module which does this. If a main method is not declared and the `delegate` method is available and the `delegate` variable has been set to `true` in that module then a dynamic method is created which invokes delegate(3). This allows for useful behaviour such as to map a command line option to a module method invocation.

## USAGE

	delegate "module" "method" "${options[@]:-}";
	
## EXAMPLE

Suppose you had a `say` module with the following code:

	# allow delegation for this module
	declare -g delegate=true;

	declare -gx say_greeting="world";
	say.hello() {
		console.info "hello %s" "$say_greeting";
	}
	
	say.goodbye() {
		console.info "goodbye %s" "$say_greeting";
	}
	
And then included the module in your program using require(3):

	require 'say';
	
The `say` module would automatically have a dynamic delegate(3) method created (called `say`) which allows for invocations such as:

	say hello && say goodbye;

## BUGS

**delegate** is written in bash and depends upon `bash` >= 4.

## COPYRIGHT

**delegate** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

require(3)
ronn:markdown

######################################################################
# 	delegate
#
#	Provides the delegate logic for program entry points.
#
#	Invokes a method by concatenating the module and method name
#	passing all remaining options to the delegate method.
#
#	@see require
#
#	$1	A module name.
#	$2	A method name.
#	$@	Options to pass to the invoked method.
######################################################################
function delegate {
	# method pseudo-namespace delimiter
	local delimiter=".";
	
	local module=${1:-};
	shift;
	
	# TODO: only shift if we have more options to process
	local method=${1:-};
	shift;
	
	# echo "delegate got options length: $#";
	
	#TODO: test whether the delegate method exists
	
	if [ ! -z "$method" ]; then
		#straight method call
		if [ -z "$module" ]; then
			"${method}" "$@";
		#method call in module
		else
			"${module}${delimiter}${method}" "$@";
		fi
	fi
}
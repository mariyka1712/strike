: <<'ronn:markdown'
executable(3) -- executable module
=============================================

## SYNOPSIS

Module methods for system executables.

## DESCRIPTION

Enables validation and referencing of executables in `$PATH`.

## USAGE

Use executable(3) to validate a list of executables:

	require 'executable';
	executable validate ronn git;
	
If any of the listed executables are not available on the system the program will exit with a non-zero exit code. If executable validation succeeds the executable paths are available in the global `executables` associative array and can be accessed anywhere in the program, for example:

	local git="${executables[git]}";

## BUGS

**executable** is written in bash and depends upon `bash` >= 4.

## COPYRIGHT

**executable** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

require(3)
ronn:markdown

function executable.validate {
	local cmd;
	for opt in ${@}
		do
			set +o errexit;
			cmd=$( command -v "$opt" );
			set -o errexit;
			if [ -z "$cmd" ]; then
				quit 1 "%s is not available" "$opt";
			fi
			if [ ! -x "$cmd" ]; then
				# under some circumstances command -v returns
				# just the executable name so we look in $PATH
				# for the executable path
				executable.find "$opt";
				if [ -n "$_result" ]; then
					cmd="$_result";
				else
					quit 1 "%s at %s is not executable" "$opt" "$cmd";
				fi
			fi
			executables["$opt"]="$cmd";
	done
}

# converts $PATH to an array
function executable.path {
	_result="";
	local IFS=":";
	set $PATH;
	_result="$@";
}

# finds the first executable in $PATH
function executable.find {
	_result="";
	local opt paths path;
	for opt in ${@}
		do
			executable.path;
			paths=( $_result );
			for path in ${paths[@]}
				do
					if [ -x "${path}/${opt}" ]; then
						_result="${path}/${opt}";
						return 0;
					fi
			done
	done
}
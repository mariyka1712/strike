declare -Ag prompt_data;
declare -Ag prompt_boolean;

# callback lists
declare -g prompt_accepted;
declare -g prompt_rejected;
declare -g prompt_invalid;

declare -g prompt_current;

# current prompt command
declare -g prompt_command;
declare -ag prompt_command_options;

# custom ps prompt
declare -g prompt_ps;

# add a boolean prompt
# $1 id
# $2 true string
# $3 false string
# $4..$# message parameters ...
prompt.boolean() {
	local key="${1:-}";
	shift;
	# store newline separated
	local quoted="";
	local IFS=$'\n';
	quoted=( $@ );
	prompt_boolean["$key"]="${quoted[*]}";
}

# add a data prompt - read a non-empty string
# $1 id
# $2..$# message parameters ...
prompt.data() {
	local key="${1:-}";
	shift;
	# store newline separated
	local quoted="";
	local IFS=$'\n';
	quoted=( $@ );
	prompt_data["$key"]="${quoted[*]}";
}

# show a prompt by id
prompt.show() {
	local key="${1:-}";
	shift;
	if [ -n "${prompt_boolean["$key"]:-}" ]; then
		local IFS=$'\n';
		local values=( ${prompt_boolean["$key"]} );
		prompt_command_options=( ${values[@]} );
		prompt_command='__prompt.show.boolean';
		__prompt.show.boolean ${values[@]};
		return $?;
	elif [ -n "${prompt_data["$key"]:-}" ]; then
		local IFS=$'\n';
		local values=( ${prompt_data["$key"]} );
		prompt_command_options=( ${values[@]} );		
		prompt_command='__prompt.show.data';
		__prompt.show.data ${values[@]};
		return $?;
	fi
	console.warn "no prompt data for %s" "$key";
	return 1;
}

# sets accept callback method
prompt.accepts() {
	prompt_accepted="$@";
}

# sets rejects callback method
prompt.rejects() {
	prompt_rejected="$@";
}

# sets invalid callback method
prompt.invalid() {
	prompt_invalid="$@";
}

# clean prompt data
prompt.clean() {
	unset prompt_data;
	unset prompt_boolean;
	declare -Ag prompt_data;
	declare -Ag prompt_boolean;
}

######################################################################
#
#	PRIVATE METHODS
#
######################################################################

function __prompt.trigger {
	local m;
	local IFS=' ';
	local methods=( $1 );
	shift;
	unset IFS;	
	# echo "trigger called with ${#methods[@]} : ${methods[@]}";
	for m in ${methods[@]}
		do
			#echo "callback : $m";
			if method.exists? "$m"; then
				$m "$@";
			fi
	done
}

function __prompt.accepted {
	__prompt.trigger $prompt_accepted "$@";
	return 0;
}

function __prompt.rejected {
	__prompt.trigger $prompt_rejected "$@";
	return 0;
}

function __prompt.invalid {
	if [ -n "${prompt_invalid:-}" ]; then
		__prompt.trigger $prompt_invalid;
	fi
	$prompt_command ${prompt_command_options[@]:-};
	return 0;
}

# executed before showing a prompt
prompt.before() {
	# save stderr in file descriptor #7
	exec 7>&2;
	# redirect stderr to stdout
	exec 2>&1;
}

# executed after showing a prompt
prompt.after() {
	# restore stderr and close file descriptor #7
	if [ -f 7 ]; then
		exec 2>&7 7>&-;
	fi
}

function __prompt.show.boolean {
	local value;	
	local accept="$1";
	shift;
	local reject="$1";
	shift;
	
	prompt_current=( $@ );
	
	if [ -t 0 ]; then
		
		prompt.before;
		if [ -n "${prompt_ps:-}" ]; then
			read -ep "${prompt_ps}" value;
		else
			# show the prompt message
			console.prompt $@;	
			read -e value;
		fi
		prompt.after;
		if [ "$value" == "$accept" ]; then
			__prompt.accepted $@;
		elif [ "$value" == "$reject" ]; then
			__prompt.rejected $@;
		else
			__prompt.invalid $@;
		fi
	fi
}

function __prompt.show.data {
	local value;
	
	prompt_current=( $@ );
	
	if [ -t 0 ]; then
		
		prompt.before;
		if [ -n "${prompt_ps:-}" ]; then
			read -ep "${prompt_ps}" value;
		else
			# show the prompt message
			console.prompt $@;			
			read -e value;
		fi
		prompt.after;
		if [ -n "${value:-}" ]; then
			__prompt.accepted "${value}";
		else
			__prompt.rejected "${value}";
		fi
	fi
}

# function __prompt.show {
# 	local value;	
# 	if [ -t 0 ]; then
# 		if [ -n "${prompt_ps:-}" ]; then
# 			read -ep "${prompt_ps}" value;
# 		else
# 			read -e value;
# 		fi
# 		if [ "$value" == "$accept" ]; then
# 			__prompt.accepted $@;
# 		elif [ "$value" == "$reject" ]; then
# 			__prompt.rejected $@;
# 		else
# 			__prompt.invalid $@;
# 		fi
# 	fi
# }

# TODO: !?
# function __prompt.validate {
# 	echo "validating prompt data ... $@";
# }
# main console entry point
console() {
	# list of available commands
	local namespace="console";
	local cmd="";
	if [ $# -eq 0 ]; then
		console quit 2 \
			"no command specified";
	fi
	
	if ! method.exists? "${namespace}${delegate_delimiter}${1}"; then
		console quit 2 \
			"invalid command %s" "${1}";
	fi
	
	# exit code
	local code=1;
	cmd="$1";
	shift;
	
	if [ "$cmd" == quit ] && [ $# -gt 0 ]; then
		code="$1";
		shift;
	fi
	
	if [ -n "${cmd}" ]; then
		if ! method.exists? "${namespace}.${cmd}"; then
			console quit 2 "invalid command %s" "${cmd}";
		fi
		delegate "$namespace" "$cmd" "$@";
	fi
}

## COMMANDS

# print the generic message header
console.header() {
	sprintf "$@" "${header}";
}

# print a header title
console.title() {
	sprintf --prefix="${header_character:-}" "$@";
}

# print a message with no prefix
console.print() {
	sprintf --no-prefix "$@";
}

# print a prompt with no newline
# and a space as the suffix
console.prompt() {
	sprintf --no-newline --readline \
		--export=PS9 \
		--suffix="${PS9_SUFFIX:-}" "$@";
}

# print a log message with a prefix
console.log() {
	sprintf --prefix="${console_prefixes[log]}" "$@";
}

# print an ok message with a prefix
console.ok() {
	sprintf --suffix="${characters[tick]}" \
		--prefix="${console_prefixes[ok]}" "$@";
}

# print an info message with a prefix
console.info() {
	sprintf --prefix="${console_prefixes[info]}" "$@";
}

## ERROR COMMANDS

# print a debug message to stderr
console.debug() {
	sprintf -2 --color=cyan --prefix="${console_prefixes[debug]}" "$@";
}

# print a not ok message to stderr
console.notok() {
	sprintf -2 --color=red --suffix="${characters[cross]}" \
		--prefix="${console_prefixes[notok]}" "$@";
}

# print an error message to stderr
console.error() {
	sprintf -2 --color=red --prefix="${console_prefixes[error]}" "$@";
}

# print a warning message to stderr
console.warn() {
	sprintf -2 --color=magenta --prefix="${console_prefixes[warn]}" "$@";
}

# throw a stack trace with
# preceeding error message
console.throw() {
	local message="${1:-Unknown error}";
	console error "$message";
	console trace 1;
}

# print a stack trace as a series of error messages
console.trace() {
	local offset="${1:-0}";
	local frame="$offset";
	local line;
	local data=( $( caller $frame ) );
	while [ "${#data[@]}" -gt 0 ]; do
		sprintf -2 --color=red --prefix="${console_prefixes[trace]}" \
			"%s:%s %s" "${data[2]}" "${data[0]}" "${data[1]}";
		: $((frame++));
		data=( $( caller $frame ) );
	done
}

# exit with a failure
console.quit() {
	if [ $# -gt 0 ]; then
		console notok "$@";
	fi
	exit $code;
}

# exit successfully
console.success() {
	if [ $# -gt 0 ]; then
		console ok "$@";
	fi
	exit 0;
}

# inspect the program options 
# looking for a --no-color option
console.parse() {
	local l=$#;
	local i val;
	for((i = 1;i < l+1;i++))
		do
			eval val="$"$i;
			if [ "$val" == "${console_no_color_option}" ]; then
				console_no_color=true;
			fi
	done
}
console.parse "$@";

# mark functions as read only
readonly -f console \
	console.header \
	console.title \
	console.print \
	console.log \
	console.ok \
	console.info \
	console.debug \
	console.warn \
	console.notok \
	console.error \
	console.throw \
	console.trace \
	console.quit \
	console.success;

# redirect stderr to console error
# so that all error messages are highlighted
# wherever possible
# NOTE: this must be done before setting noclobber
# console.shell.error() {
# 	if [ -t 2 ]; then
# 		echo -e "\033[1;31m$line\033[0m";
# 	else
# 		echo "$line";
# 	fi
# }

# exec 2> >( while read line; do console.shell.error >&2; done);
# exec 2> >(while read line; do echo -e "\033[1;31m[bash] $line\033[0m" >&2; done)

# must set this option so that aliases are expanded
# shopt -s expand_aliases;

# set up aliases for backward compatability
# WARNING: these aliases will be removed in a future
# version and you should use console info etc.

# mask the info system executable
# legacy due to the old info command declaration
info() {
	console info "$@";
}

# alias "info=console info";
# alias "error=console error";
# alias "warn=console warn";
# alias "success=console.success";
# alias "quit=console quit";
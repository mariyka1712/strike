# not a module! declares global variables
# used to view all global variable declarations
# in a single location

######################################################################
#
#	PROGRAM
#
######################################################################

: <<'api:ronn:markdown'
globals-api(3) -- API for global variables
=============================================

## VARIABLES

api:ronn:markdown

: <<'api:ronn:markdown'
### PROGRAM

* `program_options`:

A duplicate of the original program options.

api:ronn:markdown
declare -agx program_options=( "$@" );

: <<'api:ronn:markdown'
* `process_name`:

Store the program name for better code legibilty.

api:ronn:markdown
declare -gx process_name="`basename $0`";

######################################################################
#
#	OPTIONS
#
######################################################################

: <<'api:ronn:markdown'
### OPTIONS

See options(3) for related information.

* `global_options`:

A list of global options that modules may inspect
to control functionality for all programs. Modules
that do so *should* not modify the options passed to
the program but program option parsing may want to shift
or ignore these options (as they have already been handled)
therefore they are listed here.

api:ronn:markdown
declare -agx global_options;
global_options=( "--no-format" );

######################################################################
#
#	SYSTEM
#
######################################################################

: <<'api:ronn:markdown'
### SYSTEM

See system(3) for related information.

* `system_info`:

Contains system information generated by system(3).

api:ronn:markdown
declare -Agx system_info;

: <<'api:ronn:markdown'
* `library_dirs`:

Directories for the library code.

api:ronn:markdown
declare -Agx library_dirs; 

: <<'api:ronn:markdown'
* `process_dirs`:

Directories for the current program.

api:ronn:markdown
declare -Agx process_dirs;

######################################################################
#
#	EXECUTABLE
#
######################################################################

: <<'api:ronn:markdown'
### EXECUTABLE

See executable(3) for related information.

* `executables`:

Associative array of executable paths created by executable(3).

api:ronn:markdown
declare -Agx executables;

######################################################################
#
#	CONSOLE
#
######################################################################

: <<'api:ronn:markdown'
### CONSOLE

See console(3) for related information.
api:ronn:markdown

: <<'api:ronn:markdown'
* `console_prefixes`:

Associative array of prefixes used by console(3) methods.
api:ronn:markdown

declare -Agx console_prefixes;
console_prefixes['info']="info";
console_prefixes['error']="error";
console_prefixes['warn']="warn";
console_prefixes['ok']="ok";
console_prefixes['notok']="not ok";
console_prefixes['prompt']="prompt";
console_prefixes['trace']="trace";
console_prefixes['debug']="debug";
console_prefixes['log']="log";

console_prefixes['header']="";
console_prefixes['print']="";

######################################################################
#
#	REQUIRE
#
######################################################################

: <<'api:ronn:markdown'
### REQUIRE

See require(3) for related information.

* `module_paths`:

Associative array of loaded modules. Each key is the absolute filesystem path to the module file and the value is the extracted module name.

api:ronn:markdown
declare -Agx module_paths;

declare -Agx module_names;

: <<'api:ronn:markdown'
* `module_methods`:

Associative array of public module methods.

api:ronn:markdown
declare -Agx module_methods;

: <<'api:ronn:markdown'
* `module_private_methods`:

Associative array of private module methods.

api:ronn:markdown
declare -Agx module_private_methods;

: <<'api:ronn:markdown'
## SEE ALSO

executable(3), system(3), console(3), options(3), require(3)
api:ronn:markdown

# utility characters
declare -Ag characters;
characters[tick]="✓";
characters[cross]="✘";
characters[lightning]="⚡";

# 75 character header used as a delimiter for program output
declare -g header="";
declare -g header_character="${strike_header_character:-+}";
declare -g header_repeat="${strike_header_repeat:-auto}";

if [ -n "${header_repeat:-}" ] \
	|| [ "${header_repeat}" == "auto" ]; then
	header_repeat=$( tput cols || printf '80' );
	COLUMNS="${header_repeat}";
fi

# generic suffic for prompts
export PS9_SUFFIX="${characters[lightning]} ";

# custom ps prompt
export PS9=" ${PS9_SUFFIX}";
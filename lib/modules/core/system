# override the return builtin so we can
# also return string values with an optional
# exit code, string return values are assigned
# to a global variable _result
# function return {
# 	# echo "return called with $1";
# 	if [[ "$1" =~ ^[0-9]+$ ]]; then
# 		# echo "return called with number $1";
# 		builtin return $1;
# 	else
# 		local exitcode="${2:-0}";
# 		_result="$1";
# 		builtin return $exitcode;
# 	fi
# }
#
#

#declare -Ag system_info;

#system.initialize() {
#system_info["bash"]="$BASH";
#system_info["os_type"]="$OSTYPE";
#system_info["host_type"]="$HOSTTYPE";
#system_info["mach_type"]="$MACHTYPE";
#system_info["os_install_key"]="$OS_INSTALL";
#system_info["bash_version"]="$BASH_VERSION";
#system_info["bash_major_version"]="${BASH_VERSINFO[0]}";
#system_info["bash_minor_version"]="${BASH_VERSINFO[1]}";
#system_info["bash_patch_level"]="${BASH_VERSINFO[2]}";
#system_info["host_name"]="${HOSTNAME}";
#system_info["home"]="${HOME}";
#}
# prints system information
system.print() {
  echo "$FUNCNAME"
	local key value;
	for key in "${!system_info[@]}"
		do
			value="${system_info["$key"]}";
			console info "${key}=%s" "$value";
	done
}

# prints dirs information
system.dirs() {
	local key value;
	for key in "${!process_dirs[@]}"
		do
			value="${process_dirs["$key"]}";
			console info "${key}=%s" "$value";
	done
}

# prints library dirs information
system.lib.dirs() {
	local key value;
	for key in "${!library_dirs[@]}"
		do
			value="${library_dirs["$key"]}";
			console info "${key}=%s" "$value";
	done
}

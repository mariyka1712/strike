# TODO: move to global variables?
declare -gx process_strict="";

declare -g process_debug="";

declare -g process_test="";

# TODO: add the process.use "debug"
# to force console.error to always throw
# a stack trace

# OS X signals
# No    Name         Default Action       Description
# 1     SIGHUP       terminate process    terminal line hangup
# 2     SIGINT       terminate process    interrupt program
# 3     SIGQUIT      create core image    quit program
# 4     SIGILL       create core image    illegal instruction
# 5     SIGTRAP      create core image    trace trap
# 6     SIGABRT      create core image    abort program (formerly SIGIOT)
# 7     SIGEMT       create core image    emulate instruction executed
# 8     SIGFPE       create core image    floating-point exception
# 9     SIGKILL      terminate process    kill program
# 10    SIGBUS       create core image    bus error
# 11    SIGSEGV      create core image    segmentation violation
# 12    SIGSYS       create core image    non-existent system call invoked
# 13    SIGPIPE      terminate process    write on a pipe with no reader
# 14    SIGALRM      terminate process    real-time timer expired
# 15    SIGTERM      terminate process    software termination signal
# 16    SIGURG       discard signal       urgent condition present on socket
# 17    SIGSTOP      stop process         stop (cannot be caught or ignored)
# 18    SIGTSTP      stop process         stop signal generated from keyboard
# 19    SIGCONT      discard signal       continue after stop
# 20    SIGCHLD      discard signal       child status has changed
# 21    SIGTTIN      stop process         background read attempted from control terminal
# 22    SIGTTOU      stop process         background write attempted to control terminal
# 23    SIGIO        discard signal       I/O is possible on a descriptor (see fcntl(2))
# 24    SIGXCPU      terminate process    cpu time limit exceeded (see setrlimit(2))
# 25    SIGXFSZ      terminate process    file size limit exceeded (see setrlimit(2))
# 26    SIGVTALRM    terminate process    virtual time alarm (see setitimer(2))
# 27    SIGPROF      terminate process    profiling timer alarm (see setitimer(2))
# 28    SIGWINCH     discard signal       Window size change
# 29    SIGINFO      discard signal       status request from keyboard
# 30    SIGUSR1      terminate process    User defined signal 1
# 31    SIGUSR2      terminate process    User defined signal 2

declare -ag signals;
signals=(
	hup
	int
	quit
	ill
	trap
	abrt
	emt
	fpe
	kill
	bus
	segv
	sys
	pipe
	alrm
	term
	urg
	stop
	tstp
	cont
	chld
	ttin
	ttou
	io
	xcpu
	xfsz
	vtalrm
	prof
	winch
	info
	usr1
	usr2
);

# bash specific signals
signals+=( debug err exit );

declare -Ag process_signals;

function process.initialize {
	local signal;
	for signal in ${signals[@]}
		do
			# initialize registry of signal
			# callback methods
			process_signals[$signal]="";
	done
}

function process.use {
	while [ $# -gt 0 ];
		do
			local val="${1:-}";
			if [ "$val" == "strict" ]; then
				process_strict="on";
				set -o errtrace;
				set -o errexit;
				set -o nounset;
			elif [ "$val" == "debug" ]; then
				process_debug="on";
			elif [ "$val" == "test" ]; then
				process_test="on";
			fi
			shift;
	done
}

# determine if we are running in debug mode
function process.debug? {
	test -n "$process_debug";
}

# determine if we are running in strict mode
function process.strict? {
	test -n "$process_strict";
}

# determine if we are running in test mode
function process.test? {
	test -n "$process_test";
}

# switch off debug mode
function process.debug! {
	process_debug="";
}

# switch off strict mode
function process.strict! {
	process_strict="";
	set +o errtrace;
	set +o errexit;
	set +o nounset;
}

# switch off test mode
function process.test! {
	process_test="";
}

# TODO: add PID file support
# print the process id
function process.pid {
	echo -ne "$$";
}

# register a callback method for a signal
function process.signal.on {
	echo "process.signal.on : $1";
}

# switch on a trap
function process.on {
	local signal;
	while [ $# -gt 0 ];
		do
			signal="$1";
			trap "__process.trap $? $signal" $signal;
			shift;
	done
}

# switch off a trap
function process.off {
	local signal;
	while [ $# -gt 0 ];
		do
			string.upper "$1";
			signal="$_result";
			trap - $signal;
			shift;
	done
}

# TODO: add lock file support for singleton processes


# responds to trap signals
function __process.trap {
	# exit code of last command
	local code="$1";
	
	# signal being processed
	local signal="$2";
	
	# in test mode just output the signal name
	if process.test?; then
		echo -ne "$signal";
	else
		echo "$FUNCNAME got signal : $signal";
		#local lineno="$2";
		local data=( $( caller 1 ) );

		if [ ${#data[@]} -gt 0 ]; then
			echo "${data[@]}";
		fi

		echo "$FUNCNAME : $code : $1";
	fi
}
# "a string" "${array[@]}"
function array.contains {
	local e;
	for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
	return 1;
}

function array.join {
	#TODO: strip leading delimiter
	local delimiter="${1:-,}";
	local elements=( "${@:2}" );
	_result=$(printf "${delimiter}%s" "${elements[@]}");
}


function array.isarray {
	local name="$1";
	set +o errexit;
	declare -p "$name" 2> /dev/null | grep -q 'declare \-a';
	local exists="$?";
	set -o errexit;
	_result="$exists";
}

function array.isassoc {
	local name="$1";
	set +o errexit;
	declare -p "$name" 2> /dev/null | grep -q 'declare \-A';
	local exists="$?";
	set -o errexit;
	_result="$exists";
}

# TODO: rename to array.last as it cannot pop
function array.pop {
	#local arr=( "$@" );
	#_result=arr[${#arr[@]}-1];
	#unset arr[${#arr[@]}-1];
	
	#echo "1: $1";
	#echo "2: $2";
	
	local opts=( "$@" );	
	_result=${opts[${#opts[@]}-1]};
	unset opts[${#opts[@]}-1];
	#echo "got opts: ${opts[@]}";
	#echo "got opts length: ${#opts[@]}";
	
	#_result="";
	
	#while [ $# -gt 0 ]
	#	do
	#		_result="$1";			
	#		shift;
	#		echo "shifted..."
	#done
}

function array.each {
	local name="${1:-}";
	local iterator="${2:-}";
	local key value;
	local index=0;
	if [ ! -z "$name" ]; then
		eval keys="\${!$name[@]}";
		for key in ${keys}
			do
				eval value="\${$name[$key]}";
				#echo "array.each got key : $key";
				# echo "got value : $value";
				
				# TODO: check the iterator method exists
				"$iterator" "$key" "$value" "$index";
				((index++));
		done
	fi
}

# write an array to name=value pairs
function array.write {
	local opts=( "$@" );
	local file="${1:-}";
	local flags="${2:-gx}";
	if [ -z "$file" ]; then
		console.warn "no file passed to array.write";
	else
		echo -ne "" > "$file" || quit 1 "could not create array.write file %s" "$file";
		local stdin;
		# this allows us to accept options and read from stdin
		# with positional parameter expansion
		if [ ! -t 0 ]; then
			# read in stdin
			read -a stdin;
			# expand stdin data to positional parameters
			set -- $( echo "${stdin[@]}" );
		fi

		function iterator {
			local key="$1" value="$2" index="$3";
			# echo "ITERATOR GOT KEY: $1";
			echo "${key}=${value}" >> "$file";
		}
		
		local arrflags isassoc;
		local i val;
		for((i = 0;i < $#;i++))
			do
				eval val="$"$[i+1];
				arrflags="-a";
				array.isassoc "$val";
				isassoc="$_result";
				if [ $isassoc -eq 0 ]; then
					arrflags="-A";
				fi
				arrflags="${arrflags}${flags}";
				
				# write the array name header comment
				# echo "writing array... $val";
				echo "#ยก declare $arrflags $val" >> "$file";
				array.each "$val" "iterator";
		done

		# clean up the iterator
		method.remove "iterator";
	fi
}

# read a name=value pair array(s) file
function array.read {
	local opts=( "$@" );
	local file="${1:-}";
	
	local arrayname="";
	
	# deal with comments 
	array.read.comment() {
		echo "got comment line... $1";
		
		if [[ "$1" =~ ^#ยก ]]; then
			local declaration=${1//#ยก /};
			local name=${declaration##* };
			# store the array name
			arrayname="$name";
			# declare the array
			eval "$declaration";
			
			#array.isassoc "$name";
			# echo "GOT ARRAY DECLARE LINE $declaration : $name : $_result";
		fi
	}
	
	# add an entry to the current array being processed
	array.read.add() {
		local __key__=${1%%=*};
		local __value__=${1##*=};
		if [ ! -z "$arrayname" ]; then
			echo "append to array $arrayname"
			# echo "key: $__key__";
			# echo "value: $__value__";
			local setter="$arrayname[\"$__key__\"]=\"$__value__\";";
			echo "using setter: $setter";
			#set +o nounset;
			eval "$setter";
			#set -o nounset;
		fi
	}
	
	if [ ! -z "$file" ] && [ -f "$file" ] && [ -r "$file" ]; then
		echo "read from file parameter...";
		while read line
			do
				echo "got file parameter line: $line";
				if [[ "$line" =~ ^# ]]; then
					array.read.comment "$line";
				else
					array.read.add "$line";
				fi
		done < <("$file")
	elif [ ! -t 0 ]; then
		echo "read from file stdin...";
		while read line
			do
				echo "got stdin file parameter line: $line";
				if [[ "$line" =~ ^# ]]; then
					array.read.comment "$line";
				else
					array.read.add "$line";
				fi
		done
	else
		quit 1 "invalid input to array.read, usage: array.read < file";
	fi
	
	# clean up the methods
	method.remove "array.read.comment";
	method.remove "array.read.add";
}
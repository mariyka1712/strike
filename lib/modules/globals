# not a module! declares global variables
# used to view all global variable declarations
# in a single location

######################################################################
#
#	PROGRAM
#
######################################################################

: <<'api:ronn:markdown'
globals-api(3) -- api for globals
=============================================

## VARIABLES

api:ronn:markdown

: <<'api:ronn:markdown'
### program_options

A duplicate of the original program options.

api:ronn:markdown
declare -agx program_options=( "$@" );

: <<'api:ronn:markdown'
### program_name

Store the program name for better code legibilty.

api:ronn:markdown
declare -gx program_name="`basename $0`";

######################################################################
#
#	OPTIONS
#
######################################################################

: <<'api:ronn:markdown'
### global_options

A list of global options that modules may inspect
to control functionality for all programs. Modules
that do so *should* not modify the options passed to
the program but program option parsing may want to shift
or ignore these options (as they have already been handled)
therefore they are listed here.

api:ronn:markdown
declare -agx global_options;
global_options=( "--no-format" );

######################################################################
#
#	SYSTEM
#
######################################################################

: <<'api:ronn:markdown'
### system_info

Contains system information generated by system(3).

api:ronn:markdown
declare -Agx system_info;

: <<'api:ronn:markdown'
### library_dirs

Directories for the library code.

api:ronn:markdown
declare -Agx library_dirs; 

: <<'api:ronn:markdown'
### program_dirs

Directories for the current program.

api:ronn:markdown
declare -Agx program_dirs;

######################################################################
#
#	EXECUTABLE
#
######################################################################

# list of executables referenced, using `executable.validate`
declare -Agx executables;

######################################################################
#
#	CONSOLE
#
######################################################################

# determines whether console prints the program name
# at the beginning of each line of output
# this is useful when a program proxies calls
# to multiple other programs and you want to determine
# which program is generating the output
declare -gx console_print_program_prefix="";

# controls whether console output is formatted
# a non-empty string value causes console to omit
# all formatting of output, switched on with the --no-format option
# see console(3)
declare -gx console_no_format="";

# controls whether console output generates a prefix
# a non-empty string value causes console to omit a prefix
# when printing output, switched on with the --no-prefix option
declare -gx console_no_prefix="";

declare -Agx console_prefixes;
console_prefixes['console.info']="[info]";
console_prefixes['console.error']="[not ok]";
console_prefixes['console.warn']="[warn]";
console_prefixes['console.ok']="[ok]";
console_prefixes['console.success']="[ok]";

######################################################################
#
#	REQUIRE
#
######################################################################

# map of require paths to module names
declare -Agx module_paths;

# public methods
declare -Agx module_methods;

# private methods
declare -Agx module_private_methods;

: <<'api:ronn:markdown'
## SEE ALSO

executable(3)
api:ronn:markdown
: <<'ronn:markdown'
git(3) -- git utility commands
=============================================

## SYNOPSIS

Utility commands for working with git(1) repositories.

## USAGE

	require 'git';
	git.info() {
		local dir="$PWD";
		if git.valid? "$dir"; then
			console.info "%s is a git repository" "$dir";
		else
			console.warn "%s is %s a git repository" "$dir" "not";
		fi
	}
	git.info;

# COMMANDS

* `git.valid?`:

Determine if a directory is a valid git(1) repository.

* `git.branch.current`:

Retrieve the name of the current branch.

* `git.branch.hash`:

Retrieve the hash of the last commit in the current branch or a specific branch.

## BUGS

**git** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**git** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

require(3)
ronn:markdown

# determine if a git repository has changes
# see: http://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git
function git.clean? {
	local output=$( git status --porcelain );
	if [ -z "$output" ]; then
		return 0;
	fi
	return 1;
}

# determine if a directory is a valid git repository
function git.valid? {
	if [ -d "$1" ] && [ -d "${1}/.git" ]; then
		return 0;
	fi
	return 1;
}

# determines if the git program is available
function git.exists? {
	local git="${executables[git]:-}";
	if [ -z "$git" ]; then
		executable.validate --test git;
		if [ -z "${executables[git]}" ]; then
			console.warn "git is not available";
			return 1;
		fi
	fi
	return 0;
}

# get the current branch name
function git.branch.current {
	if git.exists?; then
		local branch=$( "${executables[git]}" rev-parse --abbrev-ref HEAD );
		_result="$branch";
	fi
}

# get the hash of the last commit in a branch
function git.branch.hash {
	if git.exists?; then	
		git.branch.current;
		local branch="${1:-$_result}";
		local hash=$( "${executables[git]}" rev-parse "$branch" );
		_result="$hash";
	fi
}

# get the message of the last commit in a branch
function git.branch.message {
	if git.exists?; then
		git.branch.current;
		local branch="${1:-$_result}";
		local msg=$( "${executables[git]}" log -n 1 "$branch" --format=format:%s );
		_result="$msg";
	fi
}
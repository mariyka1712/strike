######################################################################
# 	module
#
#	Logic for defining and loading modules.
######################################################################

# must set this option so that aliases are expanded
shopt -s expand_aliases;

declare -agx __module_names;
modules=();
declare -Agx __module_methods;

declare -Agx __module_paths;

# list of methods declared by a module
declare -agx __require_methods;

function require {
	local name="${1:-}";
	if [ ! -z "$name" ]; then
		__require_load "$name";
	fi
}

function require.list {
	local path name;
	for path in "${!__module_paths[@]}"
		do
			name="${__module_paths[$path]}";
			info "[module] %s < %s" "$name" "$path";
	done
}

# retrieves the method list for a module
# by file path
function require.methods {
	_result="";	
	if [ ! -z "${1:-}" ]; then
		_result="${__module_methods[$1]}";
	fi
}

function __require_register {
	local name="${1:-}";
	local path="${2:-}";
	# strip any extension
	name=${name%%.*};
	if [ ! -z "$name" ]; then
		
		# echo "registering module: $name";
		
		# list of module names
		__module_names+=( "$name" );
		
		# echo "registering $name with declared methods: ${__require_methods[@]}";
		
		# list of methods declared by a module
		__module_methods["$path"]="${__require_methods[@]}";
		
		# clean up the temporary list of methods
		# generated when require was called
		__require_methods="";
	
		if [ ! -z "$path" ]; then
			__module_paths["$path"]="$name";
		fi
	fi
}

function __require_source {
	local abs="$1";
	method.diff.start;
	# echo "require: $abs";
	source "$abs";
	method.diff.end;
	# echo "got method end diff result: $_result";
	__require_methods=( "$_result" );
}

function __require_load {
	local name="${1:-}";
	
	local abspath=$(cd ${BASH_SOURCE[0]%/*} && echo $PWD);
	
	#echo "got load abs path: $abspath";
	
	local abs;
	local loaded=0;
	local declared;	
	if [ ! -z "$name" ]; then
		
		# TODO: handle ./ and ../../ paths
		
		# got a path try to load from absolute path
		if [[ "$name" =~ ^/ ]]; then
			abs="$name";
			name=`basename $abs`;
			__require_source "$abs";
			loaded=1;
		# searching by name
		else
			local searchpaths=(
				"$exedir/lib/modules"
				"$exedir/node_modules/${name}/lib/modules"
				"$exedir/../node_modules/${name}/lib/modules/"
				"$exedir/../lib/modules"
				"$abspath/modules"
			);
			for f in ${searchpaths[@]}
				do
					#expand_path "$f" > /dev/null;
					#f="$_result";
					abs="${f}/${name}";
				
					if [ -f "$abs" ] && [ -r "$abs" ]; then
						#method_start_diff;
						name=`basename $abs`;
						__require_source "$abs";
						#method_end_diff;
						#declared=( "$_result[@]" );
						#echo "got declared methods : ${declared[@]}";
						loaded=1;
						break;
					fi
			done
		
		fi
		
		if [ $loaded -eq 0 ]; then
			quit 1 "failed to load module %s" "$name";
		fi
		
		# register the module
		__require_register "$name" "$abs";
		
		strict_method_exists "$name";
		local exists=$?;
		if [ $exists -ne 0 ]; then
			#warn "loaded module %s does not declare a method named %s" "$name" "$name";
			
			#look for a main method to alias
			strict_method_exists "main";
			if [ $? -eq 0 ]; then
				#echo "alias main method for module!!!! : $name";
				alias "$name"="main "$@"";
				#strict_method_exists "$name";
				#echo "method exists after alias $?";
			fi
		fi
		set -o errexit;
		
		local constructor="${name}.initialize";
		strict_method_exists "$constructor";
		exists=$?;
		set -o errexit;
		if [ $exists -eq 0 ]; then
			"$constructor";
		fi
	fi
}

# modules require depends upon
require 'variable';

#require 'couchdb';
#couchdb "auth" "https://ffsys.cloudant.com" "hosts";
#url_query_string 'include_docs=true' 'reduce=false';
#echo "got query string: $_result";
#couchdb_view "views" "users" "$_result";

#echo "got content type: $rest_header_content_type"

#for opt in ${!rest_response_*}
#	do
#		eval value="$"$opt;
#		echo "got rest response opt : $opt : $value";
#done

#couchdb "info";
#couchdb "head" "cyberfunk" && couchdb_print;
#couchdb "get" "cyberfunk-abc";
#echo "got rev: ${json_rev}";
#couchdb "put_file" "package" "/Users/cyberfunk/git/hosts/package.json";
#couchdb "put_data" "test" '{ "test": "value" }' && couchdb_print;
#module_list;
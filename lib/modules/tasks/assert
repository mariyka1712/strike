: <<'ronn:markdown'
tasks-assert(7) -- unit test tasks for bake(1)
=============================================

## SYNOPSIS

Unit test tasks for bake(1).

## DESCRIPTION

Adds task methods for unit testing bash programs.

## REQUIRE

In your tasks(7) file `require` the `assert` tasks using:

	require 'tasks/assert';

## USAGE

	bake assert [tests...]

## BUGS

**tasks-assert** is written in bash and depends upon `bash` >= 4.

## COPYRIGHT

**tasks-assert** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

bake(1), strike(1)
ronn:markdown

function tasks.assert {
	if [ $# -eq 0 ]; then
		__assert_run_all;
	else
		__assert_run_units "$@";
	fi
}

declare -gx __assert_expects;

function assert.expects {
	#echo "expects called with : $1";
	__assert_expects="$1";
}

function assert.ok {
	#echo "assert.complete called with : $1";
	local expected="$__assert_expects";
	local received="${1:-}";
	
	# local frame=0
	# while caller $frame; do
	# 	((frame++));
	# done
	
	local stack=( $( caller 0 ) );
	local lineno="${stack[0]}";
	local method="${stack[1]}";
	local file="${stack[2]}";
	
	# echo "got lineno : $lineno";
	# echo "got method : $method";
	# echo "got file : $file";
	
	local frame="${file}:${lineno}";
	
	if [ "$expected" == "$received" ]; then
		console.ok "%s" "$method";
	else
		error "%s $frame" "$method";
	fi
}

function __assert_run_all {
	__assert_search_paths;
	local searchpaths=( "$_result" );
	local path file;
	for path in ${searchpaths[@]}
		do
			if [ -d "$path" ]; then
				__assert_run_dir "$path";
			fi
	done
}


function __assert_run_dir {
	local dir="$1";
	if [ -d "$dir" ]; then
		for file in ${dir}/*
			do
				if [ -f "$file" ] && [[ "$file" =~ .test$ ]]; then
					__assert_run_test "$file";
				# recurse into sub-directories
				elif [ -d "$file" ]; then
					__assert_run_dir "$file";
				fi
		done
	fi
}

function __assert_run_units {
	__assert_search_paths;
	local searchpaths=( "$_result" );
	local opts=( "$@" );
	local unit path file;
	for path in ${searchpaths[@]}
		do
			for unit in ${opts[@]}
				do
					file="${path}/${unit}.test";
					if [ -f "$file" ]; then
						__assert_run_test "$file";
					fi
			done
	done	
}

function __assert_search_paths {
	local searchpaths=(
		"$exedir/test"
		"$exedir/../test"
	);
	_result="${searchpaths[@]}";
}

function __assert_run_test {
	local file="$1";
	
	# require and generate a list of method definitions
	require.methods "$file" "^test.";
	local methods=( "$_result" );
	
	info "assert %s < %s" "`basename $file`" "$file";
	local m;
	for m in ${methods[@]}
		do
			# check that the method starts with a test prefix
			if [[ "$m" =~ ^test. ]]; then				
				# clean up
				__assert_expects="";
				info "assert %s" "$m";
				set +o errexit;
				# execute the test method
				"$m";
				set -o errexit;
			fi
	done
}
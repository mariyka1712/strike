: <<'ronn:markdown'
task-latex(7) -- latex task(s) for bake(1)
=============================================

## SYNOPSIS

Latex task(s) for bake(1).

## DESCRIPTION

Compile `.tex` source files to `.pdf` or `.dvi` files. When no options are specified this task searches the `doc/latex` directory relative to the tasks(7) file and compiles all `.tex` files found into `.pdf` files within the `${target}` for the project.

Any option not recognised by this task is passed to pdflatex(1) so that you may set more advanced compilation options.

In addition, this task will change into the directory containing the source `.tex` file so that graphics or any other external files can be resolved relative to the `.tex` file without specifying `\\graphicspath` or other similar macros that may be required to resolve external files.

## REQUIRE

In your tasks(7) file `require` the `latex` task(s) using:

	require 'tasks/latex';

## USAGE

	bake latex [pdf|dvi] [options...] [files...]
	
## COMMANDS

* `pdf`:

	Sets the output format to pdf. This is the default output format used.
	
* `dvi`:

	Sets the output format to dvi.
	
## OPTIONS

* `-d | --dir [directory]`:

	Specifies an alternative directory to search for source `.tex` files. Default is `./doc/latex`.

* `-o | --output [directory]`:

	The output directory when compiling the source `.tex` file(s).
	
## FLAG OPTIONS

* `--debug`:

	Print the commands being executed. If execution of pdflatex(1) fails with a >0 exit code then the contents of the log file are printed to stderr when this option is present.
	
## FILES

Apart from the files generated by pdflatex(1) in the output directory, this task will create an additional file with the stdout and stderr output of calling pdflatex(1). The generated file is placed in the output directory and has the name of the source file (with the .tex file extension removed) concatenated with `.compile.log`. Note that we do not separate the stdout and stderr streams as all pdflatex(1) output is sent to stdout.
	
## DEPENDENCIES

pdflatex(1), find(1)

## BUGS

This task does not support passing commands after the file specification to pdflatex(1). If you need this functionality, execute pdflatex(1) directly.

**task-latex** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**task-latex** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

bake(1)
ronn:markdown

# -draftmode              switch on draft mode (generates no output PDF)
# -enc                    enable encTeX extensions such as \mubyte
# -etex                   enable e-TeX extensions
# [-no]-file-line-error   disable/enable file:line:error style messages
# -fmt=FMTNAME            use FMTNAME instead of program name or a %& line
# -halt-on-error          stop processing at the first error
# -ini                    be pdfinitex, for dumping formats; this is implicitly
#                           true if the program name is `pdfinitex'
# -interaction=STRING     set interaction mode (STRING=batchmode/nonstopmode/
#                           scrollmode/errorstopmode)
# -ipc                    send DVI output to a socket as well as the usual
#                           output file
# -ipc-start              as -ipc, and also start the server at the other end
# -jobname=STRING         set the job name to STRING
# -kpathsea-debug=NUMBER  set path searching debugging flags according to
#                           the bits of NUMBER
# [-no]-mktex=FMT         disable/enable mktexFMT generation (FMT=tex/tfm/pk)
# -mltex                  enable MLTeX extensions such as \charsubdef
# -output-comment=STRING  use STRING for DVI file comment instead of date
#                           (no effect for PDF)
# -output-directory=DIR   use DIR as the directory to write files to
# -output-format=FORMAT   use FORMAT for job output; FORMAT is `dvi' or `pdf'
# [-no]-parse-first-line  disable/enable parsing of the first line of the
#                           input file
# -progname=STRING        set program (and fmt) name to STRING
# -recorder               enable filename recorder
# [-no]-shell-escape      disable/enable \write18{SHELL COMMAND}
# -shell-restricted       enable restricted \write18
# -src-specials           insert source specials into the DVI file
# -src-specials=WHERE     insert source specials in certain places of
#                           the DVI file. WHERE is a comma-separated value
#                           list: cr display hbox math par parend vbox
# -synctex=NUMBER         generate SyncTeX data for previewers if nonzero
# -translate-file=TCXNAME use the TCX file TCXNAME
# -8bit                   make all characters printable by default
# -help                   display this help and exit
# -version                output version information and exit

function tasks.latex {
	executable.validate pdflatex;
	
	# default directory used to search for files
	local latex_dir="./doc/latex";
	
	# default output format
	local latex_output_format="pdf";
	
	# options passed to pdflatex(1)
	local latex_options=();
	
	# list of source files
	local latex_files=();
	
	# the output directory for compilation
	local latex_output="";
	
	# whether we are debugging the commands
	# being executed
	local latex_debug=false;
	
	# do command procesing via delegation
	if [ $# -gt 0 ]; then
		local cmd="${1:-}";

		if [ "$cmd" == "pdf" ] || [ "$cmd" == "dvi" ]; then
			# remove the command option
			shift;
			latex_output_format="$cmd";
		fi
		
		# parse remaining options
		__latex.parse "$@";
		local opts=( $_result );
		__latex.defaults;
		delegate "ltx.${FUNCNAME}" "compile" "${opts[@]:-}";
	else
		__latex.defaults;
		ltx.tasks.latex.all;
	fi
}

function ltx.tasks.latex.compile {
	if [ -z "$1" ]; then
		shift;
	fi
	# just the output format specified
	# pass on to the all behaviour
	if [ $# -eq 0 ]; then
		ltx.tasks.latex.all;
	else
		__latex.compile;
	fi
}

# compile everything we find in doc/latex
# to ${target}
function ltx.tasks.latex.all {
	__latex.files.get;
	if [ ${#latex_files[@]} -eq 0 ]; then
		console quit 1 "no %s files in %s" ".tex" "$latex_dir";
	else
		__latex.compile.all;
	fi
}

######################################################################
#
#	PRIVATE METHODS
#
######################################################################

# configures default options
function __latex.defaults {
	if [ -z "$latex_output" ]; then
		latex_output="${target}/$latex_output_format";
	fi
	if [ ! -d "$latex_output" ]; then
		mkdir -p "$latex_output" || quit 1 "could not create latex output directory %s" "$latex_output";
	fi
	
	# always expand path so that nested directory
	# structure are correct when using the ./doc/latex path
	if [ -d "$latex_output" ]; then
		fs.path.expand "$latex_output";
		latex_output="$_result";
	fi
	
	#  -output-directory should always be index 0
	latex_options+=( "-output-directory=$latex_output" );
	
	latex_options+=( "-output-format=$latex_output_format" );
	latex_options+=( "-halt-on-error" );
	
	# TODO: add custom latex options here
}

function __latex.files.get {
	local dir="${1:-$latex_dir}";
	if [ -d "$dir" ]; then
		latex_files+=( $( find "$dir" -name *.tex ) );
	fi
}

# attempts to compile multiple .tex files
function __latex.compile.all {
	local file;
	for file in "${latex_files[@]}"
		do
			__latex.compile "$file";
	done
}

# attempts to compile a single .tex source file
function __latex.compile {
	local name nm parent target output="$latex_output";
	fs.basename "$file" "name";
	nm="${name%.tex}";
	
	fs.dirname "$file" "parent";
	# target used to cd into so that external files
	# are resolved relative to the source .tex file
	target="${parent}";
	# make parent realtive to latex_dir
	parent="${parent#$latex_dir}";

	# echo "compiling with dir: $latex_dir";
	# echo "compiling with file: $file";
	# echo "compiling with parent: $parent";
	
	# if parent is empty the output is the root
	if [ -n "$parent" ]; then
		output="${output}${parent}";
		
		if [ ! -d "$output" ]; then
			mkdir -p "$output" || console quit 1 "could not create output directory %s" "$output";
		fi
	fi
	
	latex_options[0]="-output-directory=$output";
	
	# echo "using output: $output";
	
	if $latex_debug; then
		console print "${executables[pdflatex]} ${latex_options[*]} %s" "$file";
	fi

	local logfile="${output}/${nm}.compile.log";
	
	# exit code from compilation
	local owd=$( pwd );
	# run in subshell so the `cd` does no affect working
	# directory of the parent shell
	cd "${target}" || console quit 1 "could not cd to %s" "${target}";
	# TODO: quote options passed to latex to allow spaces in file paths
	"${executables[pdflatex]}" "${latex_options[@]:-}" "$file" >| "$logfile" 2>&1;
	if [ $? -gt 0 ]; then
		if $latex_debug; then
			if [ -f "${output}/${nm}.log" ]; then
				# latex generated log file, more verbose/informative
				cat "${output}/${nm}.log" >&2;
			else
				cat "$logfile" >&2;
			fi
		fi
		console.warn "log file %s" "${output}/${nm}.log";
		console.warn "log file %s" "$logfile";
		console quit 1 "failed to compile %s" "$file";
	fi
	cd "$owd" || console quit 1 "could not cd to %s" "${owd}";
}

# parse command line options
function __latex.parse {
	# unprocessed options
	local options=();
	
	# listing the pdflatex options
	# allows us to add our own options
	# and validate the options parsed before
	# invoking pdflatex, will need a resync
	# when new versions of pdflatex are released
	# the boolean value indicates whether the pdflatex
	# option expects a value using the = operator
	declare -A latex_options=(
		[-draftmode]=false
		[-enc]=false
		[-etex]=false
		[file-line-error]=false
		[-no-file-line-error]=false
		[-fmt]=true
		[-ini]=false
		[-interaction]=true
		[-ipc]=false
		[-ipc-start]=false
		[-jobname]=true
		[-kpathsea-debug]=true
		[mktex]=true
		[-no-mktex]=true		
		[-mltex]=false
		[-output-comment]=true
		[-no-parse-first-line]=false
		[-progname]=true
		[-recorder]=false
		[-shell-escape]=false
		[-no-shell-escape]=false
		[-shell-restricted]=false
		[-src-specials]=false
		[-src-specials]=true
		[-synctex]=true
		[-translate-file]=true
		[-8bit]=false
	);

	# unsupported pdflatex(1) options
	
	# [-output-directory]=true
	# [-output-format]=true
	# [-halt-on-error]=false
	# -help
	# -version
	
	local value;
	# handle other options
	while [ "${1:-}" != "" ]; do
		case $1 in
			-d | --dir )
				shift;
				value="${1:-}";
				if [ -z "$value" ]; then
					console quit 1 "no directory specified for the %s option" "-d | --dir";
				fi
				if [ ! -d "$value" ]; then
					console quit 1 "%s not a directory" "$value";
				fi
				if [ ! -r "$value" ]; then
					console quit 1 "%s not readable" "$value";
				fi
				latex_dir="$value";
				;;
			-o | --output )
				shift;
				value="${1:-}";
				if [ -z "$value" ]; then
					console quit 1 "no directory specified for the %s option" "-o | --output";
				fi
				if [ ! -d "$value" ] || [ ! -w "$value" ]; then
					console quit 1 "invalid output directory %s" "$value";
				fi
				# remove any trailing slash
				value="${value%/}";
				latex_output="$value";
				;;
			--debug )
				latex_debug=true;
				;;					
			* )
				options+=( "$1" );
				;;
		esac
		if [ $# -ne 0 ]; then
			shift;
		else
			break;
		fi
	done

	# return remaining options back
	_result="${options[@]:-}";
}
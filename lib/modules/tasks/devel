: <<'ronn:markdown'
task-devel(7) -- develelopment task(s) for bake(1)
=============================================

## SYNOPSIS

Development task(s) for bake(1).

## DESCRIPTION

Integrates with tasks-project(7) to copy dependencies during local develelopment.

## REQUIRE

In your tasks(7) file `require` the `devel` task(s) using:

	require 'tasks/devel';

## USAGE

	bake devel push [options...] [id]
    bake devel pull [options...] [id]

## COMMANDS

* `push`:

    Push this project to other project dependencies.

* `pull`:

    Pull project dependencies into this project.

## OPTIONS

* `--force`:

    Force overwriting of an existing dependency.

* `--test`:

    Run tests after a push or pull command.

* `--revert`:

    Revert to the version in use prior to a push or pull if tests fails.

## BUGS

**task-devel** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**task-devel** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

bake(1), tasks-project(7)
ronn:markdown

require.once 'tasks/project';

declare -ag devel_excludes;
devel_excludes=(
    "\.git$"
    "\.svn$"
    "target$"
    "tmp$"
);

tasks.devel() {
    if [ $# -eq 0  ]; then
        console quit 1 "no %s command specified" "devel";
    fi
    local cmd="${1:-}";
    shift;
    if ! method.exists? "devel.$cmd"; then
        console quit 1 "invalid %s command %s" "devel" "$cmd";
    fi

    declare -A prj_doc;
    # ensure we have a project file path
	!project.file;
	local prjfile="$_result";

    local force=false;

    delegate "devel" "$cmd" "$@";
}

devel.push() {
	
	local log="${target}/push.log";
	printf "" >| "${log}";
    local id="${1:-}";
    if [ -z "${id}"  ]; then
        console quit 1 "no id specified";
    fi

    if ! !project.exists? "${id}"; then
        console quit 1 "project %s does not exist" "${id}";
    fi

    #TODO: check whether a devel-target has been set for the project

    local path="${prj_doc[projects.$id.path]}";

    if [ ! -d "${path}"  ] || [ ! -e "${path}" ]; then
        console quit 1 "project path %s does not exist or is not a directory" "${path}";
    fi

    local name;
    # use the directory name for the moment
    # should be able to use a configured name
    # in package.json
    fs.basename "${root}" "name";

    local subfolder="node_modules/${name}";
    local destination="${path%/}";
    destination="${destination}/${subfolder}";
	fs.path.expand "${destination}";
	destination="$_result";
	if [ ! -d "${destination}" ]; then
		mkdir -p "${destination}" \
			|| console quit 1 "could not create %s" "${destination}";
	fi

    #echo "copy project to target ... with id $id : $path : $destination"
	console.info "push %s > %s" "${root}" "${destination}";
    
    local f;
    for f in ${root}/*
        do
            if !devel.exclude?; then
                continue;
            fi
            #echo "copy file $f to $destination";
			console.info "push %s" "$f";
			cp -Rfv "${f}" "${destination}" >> "${log}" 2>&1;
    done

}

# TODO: make this obey .gitignore / .npmignore
!devel.exclude?() {
    local re;
    for re in ${devel_excludes[@]}
        do
            #echo "testing $f with $re"
            if [[ "$f" =~ $re ]]; then
                # echo "excluding $f"
                return 0;
            fi
    done
    return 1;
}


: <<'ronn:markdown'
task-semver(7) -- semver task(s) for bake(1)
=============================================

## SYNOPSIS

Task(s) for bake(1) that handle working with the semantic versioning specification.

## DESCRIPTION

Command methods for semantic versioning, including semver(7) validation and creation of a project version descriptor.

## REQUIRE

In your tasks(7) file `require` the `semver` task(s) using:

	require 'tasks/semver';

## USAGE

To validate a semver(7) use the `semver.valid` command.

	bake semver.valid 1.2.0-alpha.1+build.12f4e9
	
## FILES

All files are stored in the `${root}` of the project.

### PACKAGE

An npm(1) package descriptor (*package.json*) that stores semver(7) information in the `version` field.

### VERSION

A text file (*version*) containing the current semver(7) version.

### SEMVER

A JSON document (*semver.json*) generated by task-semver(7) containing version information for the project.

## BUGS

**task-semver** is written in bash and depends upon `bash` >= 4.

## COPYRIGHT

**task-semver** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

bake(1), semver(3), semver(7)
ronn:markdown

require 'semver';
require 'json';

# tasks for working with semver data
function tasks.semver {
	__semver.file;
	local semverfile="$_result";
	local semverstr;
	declare -A semverdoc;
	if ! __semver.file.exists? && __semver.package.file.exists?; then
		console.info "%s < %s" "$semverfile" "$_result";
		# parse the package descriptor semver		
		__semver.package.parse;
		semverstr="$_result";
		
		# echo "got semver string: $semverstr";
		
		if ! semver.valid? "$semverstr"; then
			console.quit 1 "semver %s is not valid" "$semverstr";
		else
			# got a valid semver string from the package descriptor
			semverdoc[generator]="task-semver(7), do not edit this file manually use bake(1)";
			semverdoc[semver.version]="$semverstr";
			
			#echo "${semverdoc[@]}";
			
			semver.callback() {
				local keys=( ${!semver[@]} );
				local key val;
				echo "got semver keys: ${keys[@]}";
				for key in ${keys[@]}
					do
						val="${semver[$key]}";
						semverdoc["semver.${key}"]="$val";
				done
				
				echo "got semver data to write: ${!semverdoc[@]}";
				
				# test for the encoded JSON document
				json.stringify <<< "semverdoc";
				json.string;
			}
			
			# parse the retrieved semver
			semver.parse "$semverstr" "semver.callback";
			method.remove "semver.callback";
		fi
	elif __semver.file.exists?; then
		console.info "semver file %s exists" "$semverfile";
	fi
	return 0;
}

# tests if a semver is valid
function tasks.semver.test {
	local semver;
	if [ $# -eq 0 ]; then
		console.quit 1 "no semver specified to test";
	else
		if semver.valid? "$1"; then
			console.info "semver %s is ok" "$1";
		else
			console.error "semver %s is not ok" "$1";
		fi
	fi
}

# prints semver file status
function tasks.semver.files {
	__semver.file;
	local semverfile="$_result";	
	__semver.package.file;
	local packagefile="$_result";
	__semver.version.file;
	local versionfile="$_result";
	if [ ! -f "$semverfile" ] && [ ! -f "$packagefile" ] && [ ! -f "$versionfile" ]; then
		console.quit 1 "no semver information available";
	else
		local file files=( "$packagefile" "$versionfile" "$semverfile" );
		for file in ${files[@]}
			do
				if [ -f "$file" ]; then
					console.info "%s %s" "$file" "✓";
				else
					console.warn "%s %s" "$file" "✘";
				fi
		done
	 	if [ -f "$packagefile" ] && [ ! -f "$semverfile" ] && [ ! -f "$versionfile" ]; then
			console.info "run %s to create files" "bake semver";
		fi		
	fi
}

function __semver.file.write! {
	echo "write semver version file ... ";
	return 0;
}

function __semver.file.exists? {
	__semver.file;
	test -f "$_result";
}

function __semver.package.file.exists? {
	__semver.package.file;
	test -f "$_result";
}

function __semver.package.parse {
	__semver.package.file;
	local srcfile="$_result";
	console.info "parsing %s" "$srcfile";
	# parse the semver
	json.parse < "$srcfile";
	_result="${json_doc[version]:-}";
	# clean the parsed json data, we're done
	json.clean;
}

function __semver.version.file {
	_result="${root}/version";
}

function __semver.package.file {
	_result="${root}/package.json";
}

function __semver.file {
	_result="${root}/semver.json";
}
function json.parse {
	# clean up any previously parsed data
	json.parse.clean;
	
	# the default delimiter for key values
	local delimiter=".";
	
	# current nesting depth
	local depth=-1;
	
	# use process substitution so that parsed
	# data is available globally
	__json.start < <(__json.tokenize <&0);
}

function json.parse.clean {
	unset json_doc;
	declare -Ag json_doc;
}

######################################################################
#
#	PRIVATE METHODS
#
######################################################################

function __json.tokenize {
	local ESCAPE='(\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})'
	local CHAR='[^[:cntrl:]"\\]'
	local STRING="\"$CHAR*($ESCAPE$CHAR*)*\""
	local NUMBER='-?(0|[1-9][0-9]*)([.][0-9]*)?([eE][+-]?[0-9]*)?'
	local KEYWORD='null|false|true'
	local SPACE='[[:space:]]+'
	egrep -ao "$STRING|$NUMBER|$KEYWORD|$SPACE|." --color=never | egrep -v "^$SPACE$"  # eat whitespace
}

function __json.start {
	local token;
	: $((depth++));
	read -r token;
	__json.parse.value;
	read -r token;
	case "$token" in
		'' ) ;;
		* ) __json.throw "EXPECTED EOF GOT $token" ;;
	esac
}

function __json.parse.value {

	# configure the key with a period '.' delimiter
	local value key="${1:+${1}${delimiter}}${2:-}";
	
	# strip quotes from token values
	token="${token#\"}";
	token="${token%\"}";
	
	case "$token" in
		'{' ) : $((depth++)); __json.parse.object "$key"; return 0; ;;
		'[' ) : $((depth++)); __json.parse.array  "$key"; return 0; ;;
		* ) value=${token} ;;
	esac
	
	# enountered an empty key: ""
	if [ -z "$key" ]; then
		__json.throw "empty key encountered";
	else
		json_doc["$key"]="${value}";
		# __json.parse.debug;
	fi
}

function __json.parse.object {
	local key index=0;
	read -r token;
	case "$token" in
		'}' ) : $((depth--)); ;;
		* )
			while :
				do
					case "$token" in
						'"'*'"')
							key="$token";
							# strip quotes
							key="${key#\"}";
							key="${key%\"}";
							;;
						*) __json.throw "EXPECTED string GOT ${token:-EOF}" ;;
					esac
					read -r token;
					case "$token" in
						':') ;;
						*) __json.throw "EXPECTED : GOT ${token:-EOF}" ;;
					esac
					read -r token;
					__json.parse.value "$1" "$key"
					read -r token;
					case "$token" in
						'}') : $((depth--)); break ;;
						',') : $((index++)); ;;
						*) __json.throw "EXPECTED , or } GOT ${token:-EOF}" ;;
					esac
					read -r token;
			done
		;;
	esac
}

function __json.parse.array {
	local index=0;
	read -r token;
	case "$token" in
		']' ) : $((depth--)); ;;
		* )
			while :
				do				
					__json.parse.value "$1" "$index";
					read -r token;
					case "$token" in
						']') : $((depth--)); echo "got end of array with length: $index and key: $1"; break ;;
						',') : $((index++)); ;;
						*) __json.throw "EXPECTED , or ] GOT ${token:-EOF}" ;;
					esac
					read -r token;
					case "$token" in
						']') : $((depth--)); break ;;
					esac
			done
		;;
	esac
}

function __json.parse.debug {
	echo "json_doc key: $key" >&2;
	echo "json_doc value: $value" >&2;	
	echo "json_doc (${#json_doc[@]}): '${!json_doc[@]}'" >&2;	
}

function __json.throw {
	console.throw "$*";
}
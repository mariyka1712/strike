require 'url';
require 'executable';

# validate the curl executable is available
# after validation the executable path
# is available at: ${executables[curl]}
executable validate curl;

export http_curl_writeout="%{http_code}\n%{url_effective}\n%{time_total}\n%{num_redirects}\n";
export http_home="$HOME/.http";
export http_output_file="$http_home/http.out";
export http_head_file="$http_home/http.head";
export http_body_file="$http_home/http.body";
export http_trace_file="$http_home/http.trace";
export http_exit_file="$http_home/http.exit";
export http_config_file="$http_home/http.config";
export http_trace_ascii_file="$http_home/http.trace.ascii";
export http_head_dump_file="$http_home/http.head.dump";
export http_base_url="";

declare -gx http_strict="";

declare -Agx http_request_headers;

declare -agx http_command_options;
http_command_options=();

#have to do this in two steps for arrays
#direct assignment will cause the http_files array not
#to be available inside function definitions
declare -agx http_files;
http_files=(
	"$http_output_file"
	"$http_head_file"
	"$http_body_file"
	"$http_trace_file"
	"$http_exit_file"
	"$http_trace_ascii_file"
	"$http_head_dump_file" );

function http_clean {
	local f;
	for f in ${http_files[@]}
		do
			rm -fv "$f";
	done
}

function http_initialize {
	if [ ! -d "$http_home" ]; then
		mkdirp "$http_home";
	fi
}

function http_curl {
	local cmd="${executables[curl]}";
	if [ ! -x "$cmd" ]; then
		quit 1 "could not locate curl executable %s" "$cmd";
	fi
	
	#clean any previous rest output
	if [ -f "$http_output_file" ]; then
		rm "$http_output_file" > /dev/null;
	fi
	if [ -f "$http_exit_file" ]; then
		rm "$http_exit_file" > /dev/null;
	fi
	
	echo -n "" > "$http_head_file";
	echo -n "" > "$http_body_file";
	echo -n "" > "$http_trace_file";
	echo -n "" > "$http_trace_ascii_file";
	echo -n "" > "$http_head_dump_file";
	
	#ensure we unset all variables before the next request
	
	#TODO: move to a method for unsetting by group
	for opt in ${!http_response_*}
		do
			unset "$opt";
	done
	
	#http_response_headers=();
	
	local method="${1:-GET}";
	shift;
	local path="${1:-}";
	shift;
	
	#remaining custom options
	local opts=( "$@" );
	
	local url="$path";
	if [ ! -z "$http_base_url" ]; then
		#strip any leading slash on path
		path=${path#/};
		url="${http_base_url}/${path}";
	fi
	
	#TODO: only perform this test if a protocol has been specified
	#otherwise we can let curl use it's default: http
	
	if [[ "$url" =~ ^[a-zA-Z]+: ]]; then
		if [[ ! "$url" =~ ^https?: ]]; then
			warn "invalid url protocol must be %s or %s" "http" "https";
			return 1;
		fi
	fi
	
	# "-v"
	
	# "--header"
	# "User-Agent: firefox"
	
	local runopts=(
		"-X${method}"
		"--silent"
		"-L"
		"-i"
	);
	
	local hname hvalue;
	for hname in ${!http_request_headers[@]}
		do
			hvalue=${http_request_headers[$hname]};
			echo "adding request header: $hname::$hvalue";
			runopts+=( "--header" "${hname}: $hvalue" );
	done
	
	runopts+=(
		"--dump-header"
		"$http_head_dump_file"
		"--trace"
		"$http_trace_file"		
		"--trace-ascii"
		"$http_trace_ascii_file"
		"--write-out"
		"${curl_writeout:-"$http_curl_writeout"}"
		"-o"
		"$http_output_file"
	);

	#pass in custom opts
	if [ ${#opts[@]} -gt 0 ]; then
		runopts=( "${runopts[@]}" "${opts[@]}" );
	fi
	
	runopts=( "${runopts[@]}" "$url" );
	
	echo "run: $cmd ${runopts[@]}";
	
	http_request_method="${method}";
	
	local results=();
	local curl_exit_code;
	
	set +o errexit;	
	results=( $( $cmd "${runopts[@]}" || echo -n "$?" > "$http_exit_file" ) );
	
	#echo "got command results: ${results[@]}";
	
	curl_exit_code=0;
	
	if [ -f "$http_exit_file" ]; then
		curl_exit_code=`cat "$http_exit_file"`;
	fi
	
	echo "got curl exit code: $curl_exit_code";
	
	if [ ${#results[@]} -gt 2 ]; then
		http_response_status="${results[0]}";
		http_response_url="${results[1]}";
		http_response_time_total="${results[2]}";
		http_response_num_redirects="${results[3]:-0}";
		http_response_exit_code=${curl_exit_code:-${results[4]:-}};
	fi
	
	if [ "$http_response_exit_code" != "0" ]; then
		
		if [ ! -z "$http_strict" ]; then
			quit $http_response_exit_code "curl exited with non-zero status code (%s)" "$http_response_exit_code";
		else
			warn "curl exited with non-zero status code (%s)" "$http_response_exit_code";
		fi
	fi
	
	if [ -f "$http_output_file" ] && [ "$http_response_exit_code" == "0" ]; then
		
		#ensure that there is always a trailing newline
		#otherwise the body will not be parsed correctly
		#for servers that do not terminate the body with a newline
		#eg, json REST services
		echo "" >> "$http_output_file";
		
		__http_response_parse "${http_output_file}";
	else
		warn "no rest output file %s after request" "$http_output_file";
	fi
	
	set -o errexit;
}

######################################################################
#
#	Adds a command line option to be passed on when executing curl.
#
#	$1	The option name.
#	$2	The option value.
#
######################################################################
function http.option.add {
	local name=${1:-};
	local value=${2:-};	
	if [ ! -z "$name" ] && [ ! -z "$value" ]; then
		http_command_options+=( "$name" );
		http_command_options+=( "$value" );
	fi
}

function http_request.add.header {
	local name="$1";
	local value="${2:-}";
	local hname hvalue;
	# only a single parameter so parse the header out
	if [ -z "$value" ]; then
		hname="${name%: ?*}";
		hvalue="${name#*:}";
	fi
	
	#echo "adding request header: $hname::$hvalue";	
	string_ltrim "$hvalue";
	hvalue="$_result";
	
	#echo "adding request header (after trim): $hname::$hvalue";
	
	http_request_headers[$hname]="$hvalue";
	
	#declare -p "http_request_headers";
}

######################################################################
#
#	PRIVATE METHODS
#
######################################################################

function __http_response_parse_status {
	local raw="${@:2}";
	
	local index="$1";
	shift;
	
	# echo "got response raw : $raw";
	# echo "got response index : $index";
	
	local opts=();
	for opt in ${@}
		do
			# echo "got opt : $opt";
			opts=( "${opts[@]:-}" "$opt" );
	done
	
	#omit the first empty element in the array
	eval "export http_header_${index}_raw='${raw}'";
	export "http_header_${index}_http="${opts[1]:-}"";
	export "http_header_${index}_status="${opts[2]:-}"";
	export "http_header_${index}_message="${opts[3]:-}"";
	
	# echo "opts length: ${#opts[@]}";
	# echo "[__http_response_parse_status] : ${http_response_header_raw}";
	# echo "[http_response_header_http] : ${http_response_header_http}";
	# echo "[http_response_header_status] : ${http_response_header_status}";
	# echo "[http_response_header_message] : ${http_response_header_message}";
}

function __http_parse_header {
	#echo "__http_parse_header: $1 : $2";
	
	local index="$1";
	local name="${2%: ?*}";
	local value="${2#*:}";
	
	#convert hyphens to underscores
	name="${name//-/_}";
	
	#lowercase name
	name=${name,,};
	
	#strip leading whitespace
	string_ltrim "$value";
	value="$_result";
	
	#echo "got name: $name";
	#echo "got value: $value";
	
	#TODO: only export on the last header set received
	export "http_header_${index}_${name}=${value}";
}

function __http_response_parse {
	#echo "parsing http response..$@";
	
	# number of redirects corresponds to the number of headers to parse
	local redirects=${http_response_num_redirects:-0};
	local index=0;
	
	#echo "parsing response with number of redirects: $redirects";
	
	local output="$1";
	#cat "$output";
	local head=0;
	while read line
		do
			#echo "parsing http line $line";
			#parse the HTTP declaration
			if [[ "$line" =~ ^HTTP/1.[01] ]]; then
				#echo "parsing http response line...";
				__http_response_parse_status "$index" "${line}";
			#parsing header lines
			elif [ $head -eq 0 ]; then
				#strip the carriage return and line feeds
				line=`echo "$line" | tr -d "\r"`;
				line=`echo "$line" | tr -d "\n"`;
				if [[ -z "$line" ]] && [[ $redirects -eq 0 ]]; then
					#echo "got end of head...";
					head=1;
					echo "" >> "$http_head_file";					
				elif [[ -z "$line" ]] && [[ $redirects -gt 0 ]]; then
					#echo "parsing next header...";
					index=$[index + 1];
					redirects=$[redirects - 1];
					#echo "parsing next header after let... $redirects";
					echo "" >> "$http_head_file";
				else
					#append to the header file
					echo "$line" >> "$http_head_file";
					__http_parse_header "$index" "$line";
				fi
			#parsing the body content
			elif [ $head -eq 1 ]; then
				#echo "parsing body line $line";
				#append to the body file
				echo "$line" >> "$http_body_file";
			fi
	done < "$output";
	
	# for opt in ${!http_header_*}
	# 	do
	# 		variable_get "$opt";
	# 		echo "got header opt: $opt : $_result";
	# done
	
	# for opt in ${!http_response_header_*}
	# 	do
	# 		echo "got response header opt: $opt";
	# done
}
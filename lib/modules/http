require "url";
require "string";

#TODO: implement get/post/put/delete etc

export http_writeout_json=0;
export http_curl_writeout_json="{\"http_status\": \"%{http_code}\",\"http_url\":\"%{url_effective}\",\"http_time_total\":\"%{time_total}\"}";
export http_curl_writeout="%{http_code}\n%{url_effective}\n%{time_total}\n";
export http_output_file="$HOME/.rest.out";
export http_head_file="$HOME/.rest.head";
export http_body_file="$HOME/.rest.body";

function http_curl {
	local cmd=$( command -v "curl" );
	if [ ! -x "$cmd" ]; then
		quit 1 "could not locate curl executable %s" "$cmd";
	fi
	
	#clean any previous rest output
	if [ -f "$http_output_file" ]; then
		rm "$http_output_file" > /dev/null;
	fi
	
	echo -n "" > "$http_head_file";
	echo -n "" > "$http_body_file";	
	
	#ensure we unset all variables before the next request
	
	#TODO: move to a method for unsetting by group
	for opt in ${!rest_response_*}
		do
			unset "$opt";
	done
	
	local method="${1:-GET}";
	shift;
	local path="${1:-}";
	shift;
	
	#remaining custom options
	local opts=( "$@" );
	
	couchdb_get_url "$path";
	local url="$_result";
	
	#set +o nounset;
	set +o errexit;	
	
	local runopts=(
		"-X${method}"
		"--silent"
		"-L"
		"-i"
		"--write-out"
		"${curl_writeout:-"$http_curl_writeout"}"
		"-o"
		"$http_output_file"
	);

	#pass in custom opts
	if [ ${#opts[@]} -gt 0 ]; then
		runopts=( "${runopts[@]}" "${opts[@]}" );
	fi
	
	runopts=( "${runopts[@]}" "$url" );
	
	echo "run: $cmd ${runopts[@]}";	
	
	rest_response_method="${method}";
	
	local results=();
	local curl_exit_code;
	
	#not writing out to a json file so capture
	#the writeout data
	if [ $http_writeout_json -eq 0 ]; then
		results=( $( $cmd "${runopts[@]}" || echo "$?" ) );
		#rest_response_status="${results[0]}";
		#rest_response_url="${results[1]}";
		#rest_response_time_total="${results[2]}";
		#rest_response_exit_code="${results[3]}";
		curl_exit_code=${results[3]:-0};
	else
		$cmd "${runopts[@]}" > "$http_output_file";
		curl_exit_code=$?;
		#rest_response_exit_code="$?";
		#read in the status information on fail from the output file
		#if [ $? -ne 0 ]; then
		results=( $( cat "$http_output_file" ) );
		#fi
	fi
	
	if [ ${#results[@]} -gt 2 ]; then
		rest_response_status="${results[0]}";
		rest_response_url="${results[1]}";
		rest_response_time_total="${results[2]}";
		rest_response_exit_code=${curl_exit_code:-${results[3]:-}};
	fi
	
	if [ "$rest_response_exit_code" != "0" ]; then
		warn "curl exited with non-zero status code (%s)" "$rest_response_exit_code";
	fi
	
	if [ -f "$http_output_file" ] && [ "$rest_response_exit_code" == "0" ]; then
		__http_response_parse "${http_output_file}";
	else
		warn "no rest output file %s after request" "$http_output_file";
	fi
	
	#set -o nounset;
	set -o errexit;
}

######################################################################
#
#	PRIVATE METHODS
#
######################################################################

function __http_response_parse_status {
	export rest_response_header_raw="${@:-}";
	local opts=();
	for opt in ${@}
		do
			# echo "got opt : $opt";
			opts=( "${opts[@]:-}" "$opt" );
	done
	
	#omit the first empty element in the array
	export rest_response_header_http="${opts[1]:-}";
	export rest_response_header_status="${opts[2]:-}";
	export rest_response_header_message="${opts[3]:-}";
	
	# echo "opts length: ${#opts[@]}";
	# echo "[__http_response_parse_status] : ${rest_response_header_raw}";	
	# echo "[rest_response_header_http] : ${rest_response_header_http}";
	# echo "[rest_response_header_status] : ${rest_response_header_status}";
	# echo "[rest_response_header_message] : ${rest_response_header_message}";
}

function __http_parse_header {
	#echo "__http_parse_header: $1";
	local name="${1%: ?*}";
	local value="${1#*:}";
	
	#convert hyphens to underscores
	name="${name//-/_}";
	
	#lowercase name
	name=${name,,};
	
	#strip leading whitespace
	string_ltrim "$value";
	value="$_result";
	
	#echo "got name: $name";
	#echo "got value: $value";
	
	export "rest_header_${name}=${value}";
}

function __http_response_parse {
	local output="$1";
	local head=0;
	while read line
		do
			#parse the HTTP declaration
			if [ -z "${rest_response_header_raw:-}" ]; then
				__http_response_parse_status "${line}";
			#parsing header lines
			elif [ $head -eq 0 ]; then
				#strip the carriage return and line feeds
				line=`echo "$line" | tr -d "\r\n"`;
				if [ -z "$line" ]; then
					head=1;
				else
					#append to the header file
					echo "$line" >> "$http_head_file";
					__http_parse_header "$line";
				fi
			#parsing the body content
			elif [ $head -eq 1 ]; then
				#append to the body file
				echo "$line" >> "$http_body_file";
			fi
	done < "$output";
}
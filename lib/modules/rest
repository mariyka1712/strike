require "url";

#TODO: implement get/post/put/delete etc

export rest_writeout_json=0;
export rest_curl_writeout_json="{\"http_status\": \"%{http_code}\",\"http_url\":\"%{url_effective}\",\"http_time_total\":\"%{time_total}\"}";
export rest_curl_writeout="%{http_code}\n%{url_effective}\n%{time_total}\n";

function rest_curl {
	local cmd=$( command -v "curl" );
	if [ ! -x "$cmd" ]; then
		quit 1 "could not locate curl executable %s" "$cmd";
	fi
	
	local rest_output_file="$HOME/.rest.out";	
	#clean any previous rest output
	if [ -f "$rest_output_file" ]; then
		rm "$rest_output_file" > /dev/null;
	fi
	
	#ensure we unset all variables before the next request
	for opt in ${!rest_response_*}
		do
			unset "$opt";
	done
	
	local method="${1:-GET}";
	shift;
	local path="${1:-}";
	shift;
	
	#remaining custom options
	local opts=( "$@" );
	
	couchdb_get_url "$path";
	local url="$_result";
	
	#set +o nounset;
	set +o errexit;	
	
	local runopts=(
		"-X${method}"
		"--silent"
		"-L"
		"-i"
		"--write-out"
		"${curl_writeout:-"$rest_curl_writeout"}"
		"-o"
		"$rest_output_file"
	);

	#pass in custom opts
	if [ ${#opts[@]} -gt 0 ]; then
		runopts=( "${runopts[@]}" "${opts[@]}" );
	fi
	
	runopts=( "${runopts[@]}" "$url" );
	
	echo "run: $cmd ${runopts[@]}";	
	
	rest_response_method="${method}";
	
	local results=();
	local curl_exit_code;
	
	#not writing out to a json file so capture
	#the writeout data
	if [ $rest_writeout_json -eq 0 ]; then
		results=( $( $cmd "${runopts[@]}" || echo "$?" ) );
		#rest_response_status="${results[0]}";
		#rest_response_url="${results[1]}";
		#rest_response_time_total="${results[2]}";
		#rest_response_exit_code="${results[3]}";
		curl_exit_code=${results[3]:-0};
	else
		$cmd "${runopts[@]}" > "$rest_output_file";
		curl_exit_code=$?;
		#rest_response_exit_code="$?";
		#read in the status information on fail from the output file
		#if [ $? -ne 0 ]; then
		results=( $( cat "$rest_output_file" ) );
		#fi
	fi
	
	if [ ${#results[@]} -gt 2 ]; then
		rest_response_status="${results[0]}";
		rest_response_url="${results[1]}";
		rest_response_time_total="${results[2]}";
		rest_response_exit_code=${curl_exit_code:-${results[3]:-}};
	fi
	
	if [ "$rest_response_exit_code" != "0" ]; then
		warn "curl exited with non-zero status code (%s)" "$rest_response_exit_code";
	fi
	
	if [ -f "$rest_output_file" ] && [ "$rest_response_exit_code" == "0" ]; then
		rest_result_parse "${rest_output_file}";
	else
		warn "no rest output file %s after request" "$rest_output_file";
	fi
	
	#set -o nounset;
	set -o errexit;
}

function rest_result_parse_status {
	#echo "got rest_result_parse_status : ${@}";
	local opts=( "${@}" );
	echo "opts length: ${#opts[@]}";
	export rest_response_header_raw="${opts[@]:-}";
	export rest_response_header_http="${opts[0]:-}";
	export rest_response_header_status="${2:-}";	
	export rest_response_header_message="${3:-}";
	
	echo "[rest_result_parse_status] : ${rest_response_header_raw}";	
	echo "[rest_response_header_http] : ${rest_response_header_http}";		
	
	#for opt in ${@}
	#	do
	#		echo "got opt : $opt";
	#done
}

function rest_parse_header {
	echo "rest_parse_header: $1";
	local name="${1%:*}";
	local value="${1#*:}";
	
	#convert hyphens to underscores
	name="${name//-/_}";
	
	#lowercase name
	name=${name,,};
	
	#strip leading whitespace
	read  -rd '' value <<< "$value";
	
	echo "got name: $name";
	echo "got value: $value";
}

function rest_result_parse {
	
	local output="$1";
	local parts;
	local head=0;
	while read line
		do
			if [ -z "${rest_response_header_raw:-}" ]; then
				#TODO :ensure this is parsing correctly
				echo "got first line to parse... $line"
				parts=( "$line" );
				rest_result_parse_status "${parts}";
				echo "got rest_result_parse_status : $rest_response_header_status"
			#parsing header lines
			elif [ $head -eq 0 ]; then
				#strip the carriage return and line feeds
				line=`echo "$line" | tr -d "\r\n"`;
				rest_parse_header "$line";
				if [ -z "$line" ]; then
					head=1;
				fi
			#parsing the body content
			elif [ $head -eq 1 ]; then
				echo "parse body line... $line";
			fi
	done < "$output";
	
	#rest_http="$1";
	#shift;
	#rest_status=${1:-};
	#shift;
	#rest_message="${1:-}";
	#shift;
	
	#echo "rest data: $rest_http : $rest_status : $rest_message";
	#local result=( "${@}" );
	#parse the headers
	#for header in ${result[@]}
#		do
#			echo "got header: $header";
#	done	
}
require 'http';

#TODO: implement get/post/put/delete etc

#declare -agx rest_parameters;
#rest_parameters=();

######################################################################
#
#	HTTP verb commands
#
######################################################################
function rest_get {
	array.pop "$@";
	local url="$_result";
	http curl "GET" "$url";
	#http_curl "GET" "http://google.com";
	#echo "num redirects: $http_response_num_redirects";
	#echo "return code: $http_response_exit_code";
	__rest_print_body;
}

function rest_post {
	array.pop "$@";
	local url="$_result";
	
	http.curl "POST" "$url";
	
	__rest_print_body;
}

######################################################################
#
#	Utility commands
#
######################################################################
function rest_clean {
	info "cleaning files in %s" "$http_home";
	http.clean > /dev/null || quit 1 "error cleaning files in %s" "$http_home";
	success "clean complete";
}

function rest_redo {
	info "using %s" "$http_config_file";
	echo "rest redo called...";
	if [ -f "$http_config_file" ]; then
		http.curl.execute "-v" "--config" "$http_config_file";
	else
		quit 1 "no config file %s" "$http_config_file";
	fi
	
	#http curl "GET" "$url";
	#http_curl "GET" "http://google.com";
	#echo "num redirects: $http_response_num_redirects";
	#echo "return code: $http_response_exit_code";
	
	__rest_print_body;
}

function rest_config {
	if [ -f "$http_config_file" ]; then
		cat "$http_config_file";
	else
		quit 1 "no config file %s" "$http_config_file";
	fi
}

function rest_options.parse {
	#echo "parsing rest program options..."
	local name;
	local value;
	while [ "${1:-}" != "" ]; do
		
		#echo "got option: $1";
		
		case $1 in
		-H | --header )
			shift;
			http request.add.header "$1";
			;;
		# shortcut for the content type header
		--type )
			shift;
			http request.add.header "content-type: $1";
			;;
		# query string parameter(s), repeatable
		--param )
			shift;
			name="${1:-}";
			shift;
			value="${1:-}";
			url.params.add "$name" "$value";
			;;
		--data )
			shift;
			value="$1";
			echo "got data parameter... :: $value";
			
			#http request.add.header "content-type: $1";
			;;
			
		
		# TODO: allow unrecognised options to be passed to curl ..
		
		# --* )
		# 	name=${1:-};
		# 	shift;
		# 	value=${1:-};
		# 	# TODO: validate that the option is a recognised curl option...
		# 	echo "got unrecognised hyphen option... $name :: $value";
		# 	http.option.add "$name" "$value";
		# 	#http add_request_header "$1";
		# 	;;
		esac
		if [ $# -ne 0 ]; then
			shift;
		else
			break;
		fi
	done
}

function __rest_print_body {
	if [ -f "$http_body_file" ]; then
		#echo "got http body file... $http_body_file"
		cat "$http_body_file";
	fi
}
require 'http';

declare -Agx rest_print;

# allow delegation for this module
declare -g delegate=true;

######################################################################
#
#	HTTP verb commands
#
######################################################################
function rest.get {
	array.pop "$@";
	local url="$_result";
	http curl "GET" "$url";
	__rest_print;
}

function rest.head {
	array.pop "$@";
	local url="$_result";
	http curl "GET" "$url" "--head";
	__rest_print;
}

function rest.post {
	array.pop "$@";
	local url="$_result";
	http curl "POST" "$url";
	__rest_print;	
}

function rest.put {
	array.pop "$@";
	local url="$_result";
	http curl "PUT" "$url";
	__rest_print;	
}

function rest.delete {
	array.pop "$@";
	local url="$_result";
	http curl "DELETE" "$url";
	__rest_print;	
}

function rest.options {
	array.pop "$@";
	local url="$_result";
	http curl "OPTIONS" "$url";
	__rest_print;
}

######################################################################
#
#	Utility commands
#
######################################################################
function rest.dl {
	# show download progress to the screen
	http_print_stderr="on";
	
	array.pop "$@";
	local url="$_result";
	http.curl.execute "--location" "-#" "--write-out" "$http_curl_writeout" "--remote-name" "$url";
}

function rest.clean {
	info "cleaning files in %s" "$http_home";
	http.clean > /dev/null || quit 1 "error cleaning files in %s" "$http_home";
	success "clean complete";
}

function rest.redo {
	info "using %s" "$http_config_file";
	if [ -f "$http_config_file" ]; then
		http.curl.execute "--config" "$http_config_file";
	else
		quit 1 "no config file %s" "$http_config_file";
	fi
	
	__rest_print;
}

function rest.load {
	local id="${1:-}";
	local path="${http_config_dir}/${id}";
	if [ ! -f "$path" ]; then
		quit 1 "no configuration file %s" "$path";
	fi
	info "using %s" "$path";
	http.curl.execute "--config" "$path";
}

function rest.config {
	if [ -f "$http_config_file" ]; then
		cat "$http_config_file";
	else
		quit 1 "no config file %s" "$http_config_file";
	fi
}

function rest.options.parse {
	#echo "parsing rest program options..."
	local name;
	local value;
	while [ "${1:-}" != "" ]; do
		
		#echo "got option: $1";
		
		case $1 in
		-H | --header )
			shift;
			http request.add.header "$1";
			;;
		# shortcut for the content type header
		--type )
			shift;
			http request.add.header "content-type: $1";
			;;
		# query string parameter(s), repeatable
		--param )
			shift;
			name="${1:-}";
			shift;
			value="${1:-}";
			url.params.add "$name" "$value";
			;;
		--save )
			shift;
			name="${1:-}";
			echo "setting http_config_name to : $name";
			http_config_name="$name";
			;;
		-d | --data )
			shift;
			value="$1";
			http.option.add "--data" "$value";
			;;
		--json )
			shift;
			# value="$1";
			value=$( printf %q "$1" );
			# echo "got json data parameter... :: $value";
			http request.add.header "content-type: application/json";
			http.option.add "--data-binary" "$value";
			;;
		--xml )
			shift;
			# value="$1";
			value=$( printf %q "$1" );
			# echo "got xml data parameter... :: $value";
			http request.add.header "content-type: text/xml";
			http.option.add "--data-binary" "$value";
			;;
		--print-body )
			rest_print[body]="on";
			;;
		--print-headers )
			rest_print[headers]="on";
			;;
		--print-env )
			rest_print[env]="on";
			;;
			
		
		# TODO: allow unrecognised options to be passed to curl ..
		
		# --* )
		# 	name=${1:-};
		# 	shift;
		# 	value=${1:-};
		# 	# TODO: validate that the option is a recognised curl option...
		# 	echo "got unrecognised hyphen option... $name :: $value";
		# 	http.option.add "$name" "$value";
		# 	#http add_request_header "$1";
		# 	;;
		esac
		if [ $# -ne 0 ]; then
			shift;
		else
			break;
		fi
	done
}

######################################################################
#
#	PRIVATE METHODS
#
######################################################################

function __rest_print {
	local p m exists;
	for p in ${!rest_print[@]}
		do
			m="__rest_print_${p}";
			if method.exists? "$m"; then
				$m;
			fi
	done
}

function __rest_print_env {
	local name value;
	for name in ${!http_*}
		do
			variable.get "$name";
			value=$( printf %q "$value" );
			echo "${name}=${value}";
	done
}

function __rest_print_headers {
	if [ -f "$http_head_dump_file" ]; then
		#echo "got http body file... $http_body_file"
		cat "$http_head_dump_file";
	fi
}

function __rest_print_body {
	if [ -f "$http_body_file" ]; then
		#echo "got http body file... $http_body_file"
		cat "$http_body_file";
	fi
}
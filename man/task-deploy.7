.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "TASK\-DEPLOY" "7" "January 2013" "" ""
.
.SH "NAME"
\fBtask\-deploy\fR \- deploy task(s) for bake(1)
.
.SH "SYNOPSIS"
Deploy task(s) for bake(1)\.
.
.SH "DESCRIPTION"
Performs a deployment for a project\.
.
.SH "REQUIRE"
You do not need to require(3) this task as it is a builtin task\.
.
.SH "USAGE"
.
.nf

bake deploy [options\.\.\.] [profiles\.\.\.]
.
.fi
.
.SH "TYPES"
The deploy tasks support the \fIgit\fR and \fItar\fR deployment types\.
.
.SS "GIT"
This deployment type will clone if the deployment directory does not exist and fetch the specified branch from the remote repository\.
.
.SS "TAR"
This deployment type will fetch a tarball from a filesystem path or remote URL and extract the contents to the target directory\.
.
.SH "JSON FORMAT"
The format of the \fIdeploy\.json\fR descriptor is described in the task\-deploy\-json(7) man page, to view this man page run:
.
.IP "" 4
.
.nf

bake help deploy\-json
.
.fi
.
.IP "" 0
.
.SH "TARGET"
The final deploy target is a combination of the \fIdirectory\fR, \fIname\fR and \fIprofile\fR by default\. Assuming a \fIdirectory\fR of \fB~/www\fR and the project name \fBproject\fR with a deployment profile of \fBstage\fR the target used for deployment is:
.
.IP "" 4
.
.nf

~/www/project/stage
.
.fi
.
.IP "" 0
.
.P
If you do not wish to include the profile name in the target directory specify the \fB\-\-flat\fR option which results in:
.
.IP "" 4
.
.nf

~/www/project
.
.fi
.
.IP "" 0
.
.P
It depends upon your deployment requirements as to which strategy you wish to use\. Generally, if you are deploying to the same host then it makes sense to separate the deployment profiles, whereas if each deployment profile is using a different host then it is more consistent to have the same directory structure across the different hosts\.
.
.P
You may also create separate deployment targets based on the project version using the \fB\-\-include\-version\fR option\. Continuing the above example with a version of \fB0\.0\.1\fR and the default behaviour (no \fB\-\-flat\fR option specified) then the target becomes:
.
.IP "" 4
.
.nf

~/www/project\-0\.0\.1/stage
.
.fi
.
.IP "" 0
.
.P
Or alternatively in conjunction with the \fB\-\-flat\fR option the target directory becomes:
.
.IP "" 4
.
.nf

~/www/project\-0\.0\.1
.
.fi
.
.IP "" 0
.
.SH "PROFILES"
You may specify one or more profiles to deploy after any options\. If no profiles are specified then a deploy is attempted using the \fIdefault\fR profile\.
.
.P
Note that a profile must declare at a minimum the \fItype\fR property for it to be recognised, for example the following is invalid:
.
.IP "" 4
.
.nf

{
    "profiles": {
        "stage": {}
    }
}
.
.fi
.
.IP "" 0
.
.P
Therefore the profile will not be available\. You \fBmust\fR specify at least the deployment \fItype\fR:
.
.IP "" 4
.
.nf

{
    "profiles": {
        "stage": {
            "type": "git"
        }
    }
}
.
.fi
.
.IP "" 0
.
.SH "DEFAULT PROFILE"
The default profile uses a \fIgit\fR deployment type and the current branch and git remote URL for deployment to the target host\.
.
.SH "NAMES"
Profile and project names may not start with a hyphen and should match the pattern ^[\-a\-zA\-Z0\-9]+\.
.
.SH "STRICT"
The deployment process is strict\. Failure is always assumed and when deploying multiple profiles, failure of a profile to deploy will prevent any subsequent profiles from being processed\.
.
.SH "FILES"
A \fIdeploy\.json\fR file must be present in the root of the project and must be valid JSON\. This file may just contain \'{}\' if you wish to use the \fIdefault\fR profile and configure deployment parameters via environment variables or command line options\.
.
.SH "ENVIRONMENT"
.
.TP
\fBbake_deploy_remote\fR:

.
.P
The remote host used for deployment when none is specified in \fIdeploy\.json\fR\.
.
.TP
\fBbake_deploy_shell\fR:

.
.P
The shell used on the remote server, defaults to \fB/bin/sh\fR if none is specified\.
.
.TP
\fBbake_deploy_staging\fR:

.
.P
The directory used on the remote server for staging deployment scripts, default is \fB~/\.deploy\fR\.
.
.SH "OPTIONS"
.
.TP
\fB\-\-directory [directory]\fR:

.
.P
Use \fIdirectory\fR for deployment\. When this option is specified it overrides any directory specified in \fIdeploy\.json\fR for all profiles\.
.
.TP
\fB\-\-host [user@host]\fR:

.
.P
The scp(1) and ssh(1) \fIuser@host\fR specification\. When this option is specified it overrides any host properties in \fIdeploy\.json\fR\. This is useful if you wish to deploy everything using the profile(s) in \fIdeploy\.json\fR to a different host\.
.
.TP
\fB\-\-descriptor [file]\fR:

.
.P
Use \fIfile\fR as the deployment descriptor\.
.
.TP
\fB\-\-staging [directory]\fR:

.
.P
Use \fIdirectory\fR as the staging directory\.
.
.TP
\fB\-\-shell [shell]\fR:

.
.P
Use \fIshell\fR for the script shebang\. Must be one of \fIsh\fR, \fIbash\fR, \fIzsh\fR or \fIdash\fR\.
.
.TP
\fB\-\-log\fR:

.
.P
Redirect \fIstdout\fR messages to \fBtarget/deploy/deploy\.log\fR\. Note that when using the \fB\-\-json\fR option that the JSON document is always sent to \fIstdout\fR\.
.
.TP
\fB\-\-flat\fR:

.
.P
Do not include the profile name in the target directory\.
.
.TP
\fB\-\-include\-version\fR:

.
.P
Include version information in the target directory\.
.
.TP
\fB\-\-local\fR:

.
.P
Perform a deployment on the local host\.
.
.TP
\fB\-\-json\fR:

.
.P
Dump all profile configuration settings that would be used by a deployment as a JSON document to \fIstdout\fR, implies \fB\-\-noop\fR\. This is useful to determine the settings that would be used when running a deployment\.
.
.P
If this option is used in conjunction with \fB\-\-script\fR the last option will take preference\.
.
.TP
\fB\-\-pretty\fR:

.
.P
Use in conjunction with the \fB\-\-json\fR option to pretty print the JSON document\. Uses two spaces as the indentation\.
.
.TP
\fB\-\-write\-json\fR:

.
.P
Write the deployment settings to \fBtarget/deploy/settings\.json\fR\. If used in conjunction with the \fB\-\-json\fR option then the settings will be printed to \fIstdout\fR and written to disc\. The generated document will be formatted if the \fB\-\-pretty\fR flag has been set\.
.
.TP
\fB\-\-script\fR:

.
.P
Dump script(s) to \fIstdout\fR, implies \fB\-\-noop\fR\. If this option is used in conjunction with \fB\-\-json\fR the last option will take preference\. Note that when this option is used the script(s) are still written to \fBtarget/deploy\fR\.
.
.TP
\fB\-\-no\-local\fR:

.
.P
Shortcut for combining \fB\-\-no\-local\-pre\fR and \fB\-\-no\-local\-post\fR\.
.
.TP
\fB\-\-no\-local\-pre\fR:

.
.P
Do not execute the pre\-deployment commands on the local host\.
.
.TP
\fB\-\-no\-local\-post\fR:

.
.P
Do not execute the post\-deployment commands on the local host\.
.
.TP
\fB\-\-no\-remote\fR:

.
.P
Shortcut for combining \fB\-\-no\-remote\-pre\fR and \fB\-\-no\-remote\-post\fR\.
.
.TP
\fB\-\-no\-remote\-pre\fR:

.
.P
Do not execute the pre\-deployment commands on the remote host\.
.
.TP
\fB\-\-no\-remote\-post\fR:

.
.P
Do not execute the post\-deployment commands on the remote host\.
.
.TP
\fB\-\-noop\fR:

.
.P
Print commands but do not execute them\.
.
.SH "NOTIFICATIONS"
If the \fIgrowlnotify\fR executable is available then a success or failure notification will be sent using \fIgrowlnotify\fR\. Note that \fIgrowlnotify\fR notifications are not sent for a \fBnoop\fR which is the case if the \fB\-\-noop\fR, \fB\-\-json\fR or \fB\-\-script\fR options are specified\.
.
.SH "FILES"
All generated files are written to \fBtarget/deploy\fR\.
.
.P
When the \fB\-\-log\fR option is specified \fIstdout\fR messages are redirected to \fBtarget/deploy/deploy\.log\fR\.
.
.P
The generated script file(s) are written to \fBtarget/deploy\fR using the following naming strategy:
.
.IP "" 4
.
.nf

${name}\-${version}\-${profile}\.sh
.
.fi
.
.IP "" 0
.
.P
If the \fB\-\-write\-json\fR option is specified then the deployment settings are written to \fBtarget/deploy/settings\.json\fR\.
.
.SH "EXIT CODES"
A >0 exit code indicates failure while a 0 exit code indicates success\.
.
.SH "EXAMPLES"
Deploy using the default profile:
.
.IP "" 4
.
.nf

bake deploy
.
.fi
.
.IP "" 0
.
.P
Deploy using the default profile locally:
.
.IP "" 4
.
.nf

bake deploy \-\-local
.
.fi
.
.IP "" 0
.
.P
Inspect deployment commands:
.
.IP "" 4
.
.nf

bake deploy \-\-noop
.
.fi
.
.IP "" 0
.
.P
Deploy the profile \fIstage\fR:
.
.IP "" 4
.
.nf

bake deploy stage
.
.fi
.
.IP "" 0
.
.P
Deploy the profiles \fItest\fR, \fIstage\fR and \fIproduction\fR:
.
.IP "" 4
.
.nf

bake deploy test stage production
.
.fi
.
.IP "" 0
.
.P
Inspect the settings used for a \fIdefault\fR deployment:
.
.IP "" 4
.
.nf

bake deploy \-\-json \-\-pretty \e
    \-\-staging ~/project\-staging \e
    \-\-name project \e
    \-\-directory ~/www
.
.fi
.
.IP "" 0
.
.SH "BUGS"
\fBtask\-deploy\fR is written in bash and depends upon \fBbash\fR >= 4\.2\.
.
.SH "COPYRIGHT"
\fBtask\-deploy\fR is copyright (c) 2012 muji \fIhttp://xpm\.io\fR
.
.SH "SEE ALSO"
bake(1), task\-deploy\-json(7)

.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "TASK\-DEPLOY" "7" "January 2013" "" ""
.
.SH "NAME"
\fBtask\-deploy\fR \- deploy task(s) for bake(1)
.
.SH "SYNOPSIS"
Deploy task(s) for bake(1)\.
.
.SH "DESCRIPTION"
Performs a deployment for a project\.
.
.SH "REQUIRE"
You do not need to require(3) this task as it is a builtin task\.
.
.SH "USAGE"
.
.nf

bake deploy [options\.\.\.] [profiles\.\.\.]
.
.fi
.
.SH "OPTIONS"
.
.TP
\fB\-\-ok\fR:

.
.P
Disable interactivity and assume \fIyes\fR for every prompt\.
.
.TP
\fB\-\-noop\fR:

.
.P
Print commands but do not execute them, implies \fB\-\-ok\fR to disable interactivity\.
.
.TP
\fB\-\-all\fR:

.
.P
Deploy all profiles in the descriptor\.
.
.TP
\fB\-\-name [name]\fR:

.
.P
Override the default project name (determined by the name of the parent directory), see \fBNAMES\fR for project and profile name rules\.
.
.TP
\fB\-\-directory [directory]\fR:

.
.P
Use \fIdirectory\fR for deployment\. When this option is specified it overrides any directory specified in \fIdeploy\.json\fR for all profiles\.
.
.TP
\fB\-\-host [user@host]\fR:

.
.P
The scp(1) and ssh(1) \fIuser@host\fR specification\. When this option is specified it overrides any host properties in \fIdeploy\.json\fR\. This is useful if you wish to deploy everything using the profile(s) in \fIdeploy\.json\fR to a different host\.
.
.TP
\fB\-\-descriptor [file]\fR:

.
.P
Use \fIfile\fR as the deployment descriptor\.
.
.TP
\fB\-\-script\-source [script]\fR:

.
.P
Use \fIscript\fR as the deployment script instead of any generated script\. The \fIscript\fR must exist and be executable\. When this option is specified then the automatically generated script is ignored and the source \fIscript\fR is used instead\. It is written to disc in the same location, deployed to the remote host (or localhost with the \fB\-\-local\fR option) and executed\.
.
.P
When this option is specified the \fB\-\-shell\fR option has no effect as it is only used to determine the \fIshebang\fR for generated deployment scripts\.
.
.P
If multiple profiles are being deployed then \fIscript\fR is used for all active deployment profiles\.
.
.TP
\fB\-\-shell [shell]\fR:

.
.P
Use \fIshell\fR for the script shebang\. Must be one of \fIsh\fR, \fIbash\fR, \fIzsh\fR or \fIdash\fR\.
.
.TP
\fB\-\-staging [directory]\fR:

.
.P
Use \fIdirectory\fR as the staging directory\.
.
.TP
\fB\-\-lint\fR:

.
.P
Perform a sanity check on the generated script and exit, implies \fB\-\-noop\fR\. You must have the \fIcheckbashisms\fR script installed in $PATH in order to use this option\. Useful for debugging the generated script\. This can be used in conjunction with the \fB\-\-script\fR option to inspect the script output as well as run the script through \fIcheckbashisms\fR\.
.
.P
Note that when using the \fB\-\-script\-source\fR option the source script becomes the target for this operation\. If the \fB\-\-shell\fR option has been specified then the \fIshebang\fR will not be \fB#!/bin/sh\fR which will cause \fIcheckbashisms\fR to output a warning but still pass the lint operation if there are no errors\.
.
.TP
\fB\-\-lint\-run\fR:

.
.P
Executes the script in the local target directory in the context of the \fIlocalhost\fR, implies \fB\-\-lint\fR and \fB\-\-noop\fR\. The script is only executed if the \fB\-\-lint\fR operation succeeds\. Useful for testing and debugging purposes\.
.
.TP
\fB\-\-list\fR:

.
.P
List profile names in a deployment descriptor\.
.
.TP
\fB\-\-log\fR:

.
.P
Redirect \fIstdout\fR messages to \fBtarget/deploy/deploy\.log\fR\. Note that when using the \fB\-\-json\fR option that the JSON document is always sent to \fIstdout\fR\.
.
.TP
\fB\-\-flat\fR:

.
.P
Do not include the profile name in the target directory, see \fBTARGET\fR for more information\.
.
.TP
\fB\-\-include\-version\fR:

.
.P
Include version information in the target directory, see \fBTARGET\fR for more information\.
.
.TP
\fB\-\-local\fR:

.
.P
Perform a deployment on the local host\.
.
.TP
\fB\-\-json\fR:

.
.P
Dump all profile configuration settings that would be used by a deployment as a JSON document to \fIstdout\fR, implies \fB\-\-noop\fR\. This is useful to determine the settings that would be used when running a deployment\.
.
.P
If this option is used in conjunction with \fB\-\-script\fR the last option will take preference\.
.
.TP
\fB\-\-pretty\fR:

.
.P
Use in conjunction with the \fB\-\-json\fR option to pretty print the JSON document\. Uses two spaces as the indentation\.
.
.TP
\fB\-\-write\-json\fR:

.
.P
Write the deployment settings to \fBtarget/deploy/settings\.json\fR\. If used in conjunction with the \fB\-\-json\fR option then the settings will be printed to \fIstdout\fR and written to disc\. The generated document will be formatted if the \fB\-\-pretty\fR flag has been set\.
.
.TP
\fB\-\-script\fR:

.
.P
Dump script(s) to \fIstdout\fR, implies \fB\-\-noop\fR\. If this option is used in conjunction with \fB\-\-json\fR the last option will take preference\. Note that when this option is used the script(s) are still written to \fBtarget/deploy\fR\.
.
.TP
\fB\-\-no\-local\fR:

.
.P
Shortcut for combining \fB\-\-no\-local\-pre\fR and \fB\-\-no\-local\-post\fR\.
.
.TP
\fB\-\-no\-local\-pre\fR:

.
.P
Do not execute the pre\-deployment commands on the local host\.
.
.TP
\fB\-\-no\-local\-post\fR:

.
.P
Do not execute the post\-deployment commands on the local host\.
.
.TP
\fB\-\-no\-remote\fR:

.
.P
Shortcut for combining \fB\-\-no\-remote\-pre\fR and \fB\-\-no\-remote\-post\fR\.
.
.TP
\fB\-\-no\-remote\-pre\fR:

.
.P
Do not execute the pre\-deployment commands on the remote host\.
.
.TP
\fB\-\-no\-remote\-post\fR:

.
.P
Do not execute the post\-deployment commands on the remote host\.
.
.TP
\fB\-\-no\-growl\fR:

.
.P
Do not send growl notifications\.
.
.TP
\fB\-\-expand\fR:

.
.P
Do not quote command options\. When this options is set parameter expansion is performed on command options declared in a deployment descriptor\.
.
.SH "TYPES"
The deploy tasks support the \fIgit\fR, \fItar\fR and \fInpm\fR deployment types\.
.
.SS "GIT"
This deployment type will clone if the deployment directory does not exist and fetch the specified branch from the remote repository\.
.
.SS "TAR"
This deployment type will fetch a tarball from a filesystem path or remote URL and extract the contents to the target directory\.
.
.SS "NPM"
This deployment type uses npm(1) to fetch a package and then copies over the extracted contents of the package to the \fBtarget\fR directory\.
.
.SH "BUNDLES"
The task\-deploy(7) execution creates a tarball bundle of the deployment files using the project \fIname\fR and \fIversion\fR concatenated with the current \fIprofile\fR for the bundle file name\. Assuming a project name of \fIproject\fR, with version \fI0\.0\.1\fR and a deployment profile of \fIstage\fR the resulting bundle is \fBproject\-0\.0\.1\-stage\.tgz\fR\.
.
.P
Bundles are created in the \fBtarget/deploy\fR directory\.
.
.P
A generated bundle will include:
.
.TP
\fBdeploy\.sh\fR:

.
.P
The generated deployment script or the contents of \fIscript\fR if \fB\-\-script\-source\fR was specified\.
.
.TP
\fBsettings\.json\fR:

.
.P
A JSON document containing the settings for the deployment\.
.
.SS "NPM"
For the \fBnpm\fR deployment type the bundle will also include:
.
.TP
\fBpackage\.json\fR:

.
.P
An npm(1) conformant package descriptor used to perform the deployment\.
.
.SH "JSON FORMAT"
The format of the \fIdeploy\.json\fR descriptor is described in the task\-deploy\-json(7) man page, to view this man page run:
.
.IP "" 4
.
.nf

bake help deploy\-json
.
.fi
.
.IP "" 0
.
.SH "TARGET"
The final deploy target is a combination of the \fIdirectory\fR, \fIname\fR and \fIprofile\fR by default\. Assuming a \fIdirectory\fR of \fB~/www\fR and the project name \fBproject\fR with a deployment profile of \fBstage\fR the target used for deployment is:
.
.IP "" 4
.
.nf

~/www/project/stage
.
.fi
.
.IP "" 0
.
.P
If you do not wish to include the profile name in the target directory specify the \fB\-\-flat\fR option which results in:
.
.IP "" 4
.
.nf

~/www/project
.
.fi
.
.IP "" 0
.
.P
It depends upon your deployment requirements as to which strategy you wish to use\. Generally, if you are deploying to the same host then it makes sense to separate the deployment profiles, whereas if each deployment profile is using a different host then it is more consistent to have the same directory structure across the different hosts\.
.
.P
You may also create separate deployment targets based on the project version using the \fB\-\-include\-version\fR option\. Continuing the above example with a version of \fB0\.0\.1\fR and the default behaviour (no \fB\-\-flat\fR option specified) then the target becomes:
.
.IP "" 4
.
.nf

~/www/project\-0\.0\.1/stage
.
.fi
.
.IP "" 0
.
.P
Or alternatively in conjunction with the \fB\-\-flat\fR option the target directory becomes:
.
.IP "" 4
.
.nf

~/www/project\-0\.0\.1
.
.fi
.
.IP "" 0
.
.SH "PROFILES"
You may specify one or more profiles to deploy after any options\. If no profiles are specified then a deploy is attempted using the \fIdefault\fR profile\.
.
.SH "DEFAULT PROFILE"
The default profile uses a \fIgit\fR deployment type and the current branch and git remote URL for deployment to the target host\.
.
.SH "NAMES"
Profile and project names may not start with a hyphen and should match the pattern ^[\-a\-zA\-Z0\-9]+\.
.
.SH "STRICT"
The deployment process is strict\. Failure is always assumed and when deploying multiple profiles, failure of a profile to deploy will prevent any subsequent profiles from being processed\.
.
.SH "FILES"
A \fIdeploy\.json\fR file must be present in the root of the project and must be valid JSON\. This file may just contain \'{}\' if you wish to use the \fIdefault\fR profile and configure deployment parameters via environment variables or command line options\.
.
.SH "ENVIRONMENT"
.
.TP
\fBbake_deploy_remote\fR:

.
.P
The remote host used for deployment when none is specified in \fIdeploy\.json\fR\.
.
.TP
\fBbake_deploy_shell\fR:

.
.P
The shell used on the remote server, defaults to \fBsh\fR if none is specified\.
.
.TP
\fBbake_deploy_staging\fR:

.
.P
The directory used on the remote server for staging deployment scripts, default is \fB~/\.deploy\fR\.
.
.SH "COMMAND EXECUTION"
The deployment process can optionally execute arbitrary simple commands on the local and remote host\. For each host, command execution is split into the pre\-deployment and post\-deployment execution phases\.
.
.P
Note that when running a local deployment (using \fB\-\-local\fR) then remote commands are executed on the local host\.
.
.P
If any command exits with an exit code \fI>0\fR then the deployment is aborted\. This is useful for running tests prior to performing a deployment or other tasks such as creating a tarball package\.
.
.P
The general syntax for declaring commands is:
.
.IP "" 4
.
.nf

"commands": {
  "local": {
    "pre": [
      {
        "command": "ls",
        "options": [ "\-la", "lib", "man" ]
      }
    ],
    "post": [
      {
        "command": "echo",
        "options": [ "deployment complete $deploy_name" ]
      }
    ]
  }
}
.
.fi
.
.IP "" 0
.
.P
All commands are encapsulated by the \fIcommands\fR object which can contain \fIlocal\fR and \fIremote\fR properties indicating whether the commands should be executed on the local or remote host\. The \fIpre\fR and \fIpost\fR properties are arrays of commands to execute for the deployment phase(s)\.
.
.P
A \fIcommands\fR object may be declared at the top\-level of the JSON descriptor document, in which case the commands will be executed for \fIall\fR profiles\. A \fIcommands\fR object may also be declared in a profile to execute commands specific to that profile\. When \fIcommands\fR are declared at the top\-level of the document and in a profile then they are concatenated together and all commands are executed\.
.
.SS "Parameter Expansion"
By default parameters are not expanded \- whitespace in a parameter is preserved and passed as a single argument to the command being executed\. For example, imagine you wanted to list the contents of the \fIlib\fR and \fIman\fR directories, this would fail (with the default settings) if you specified both directories in a single option (\fBls\fR would be looking for a directory named "lib man" rather than attempting to list two separate directories):
.
.IP "" 4
.
.nf

{
  "command": "ls",
  "options": [ "\-la", "lib man" ]
}
.
.fi
.
.IP "" 0
.
.P
You have two options to remedy this scenario\. You may either decide to separate the parameters:
.
.IP "" 4
.
.nf

{
  "command": "ls",
  "options": [ "\-la", "lib", "man" ]
}
.
.fi
.
.IP "" 0
.
.P
So that the \fIlib\fR and \fIman\fR are passed as separate arguments to \fIls\fR\. Or you may use the \fB\-\-expand\fR option to allow parameter expansion on command options\. You should only use the \fB\-\-expand\fR option if you are certain that you do not want to include whitespace in any options passed to command(s) being executed\.
.
.SS "Command Environment"
Commands executing in a \fIlocal\fR context have access to the entire bake(1) variable scope chain which means that there are some useful variables exposed to your commands\.
.
.TP
\fBproject_name\fR:

.
.P
The name of the project\.
.
.TP
\fBproject_version\fR:

.
.P
The project version\.
.
.TP
\fBroot\fR:

.
.P
The project root directory\.
.
.TP
\fBproject\fR:

.
.P
The root directory for multi\-module projects, when bake(1) is executing at the root of a multi\-module project then \fBroot\fR and \fBproject\fR point to the same directory\.
.
.TP
\fBtarget\fR:

.
.P
The \fBtarget\fR directory relative to \fB${root}\fR used by bake(1) for staging files\.
.
.TP
\fBprofile\fR:

.
.P
The name of the profile currently being deployed\.
.
.TP
\fBdeploy_target\fR:

.
.P
The final target directory used for the deployment, see the \fBTARGET\fR section\.
.
.TP
\fBdeploy_name\fR:

.
.P
The human readable name used by task\-deploy(7)\. This is the project name and version delimited by @, for example: project@0\.0\.1\.
.
.TP
\fBdeploy_file_name\fR:

.
.P
The prefix used when defining file names\. Uses \- as the delimiter, for example: project\-0\.0\.1\.
.
.TP
\fBscript_name\fR:

.
.P
The name of the script that will be used by task\-deploy(7) for deployment\.
.
.TP
\fBscript\fR:

.
.P
The path to the script that will be used to perform deployment\.
.
.TP
\fBlog\fR:

.
.P
The path to the log file used by task\-deploy(7)\.
.
.TP
\fBlogging\fR:

.
.P
A boolean indicating whether output is being redirected to the file defined by the \fIlog\fR variable\.
.
.TP
\fBtype\fR:

.
.P
The type of deployment being performed, see the \fBTYPES\fR section\.
.
.TP
\fBnoop\fR:

.
.P
A boolean indicating if this deployment is a non\-operation, will be \fItrue\fR if the \fB\-\-noop\fR option has been specified\.
.
.TP
\fBflat\fR:

.
.P
A boolean indicating if a flat directory structure is being used, see the \fBTARGET\fR section\.
.
.TP
\fBinclude_version\fR:

.
.P
A boolean indicating if version information is being included in the directory structure, see the \fBTARGET\fR section\.
.
.SS "Custom Environment"
You may declare properties specific to your deployment process in a top\-level \fIenv\fR object\. You may then access these variables in your deployment profiles using the \fBenv_\fR variable prefix\.
.
.P
Properties declared in the \fIenv\fR object may reference any variable documented in the \fBCommand Environment\fR section but they may not use \fBCross References\fR using a \fBjson_\fR variable prefix\.
.
.P
If you attempt to create a document cross\-reference in an \fIenv\fR property task\-deploy(7) will exit immediately with a \fI>0\fR exit code\.
.
.P
See the section \fBCommand Examples\fR for example(s)\.
.
.SS "Cross References"
It is recommended that you use the functionality provided by \fBCustom Environment\fR whenever possible but if you absolutely must reference other data in a deployment profile this section provides some information on using deployment descriptor cross\-references\.
.
.P
The JSON document properties are expanded to variables that you may reference in the deployment descriptor\. These variables are exposed using a \fBjson_\fR prefix\.
.
.P
This is useful to prevent duplication of information between profiles that share some (but not all) commands or properties\.
.
.P
Consider the following example document:
.
.IP "" 4
.
.nf

{
  "host": "user@example\.com",
  "directory": "~/www",
  "commands": {
    "local": {
      "pre": [
        {
          "command": "echo",
          "options": [ "$json_directory", "$json_host" ]
        }
      ]
    }
  }
}
.
.fi
.
.IP "" 0
.
.P
In this instance the \fB$json_\fR variables reference the \fIdirectory\fR and \fIhost\fR properties declared at the top\-level of the document\.
.
.P
This results in the command (for the local host pre\-deployment phase):
.
.IP "" 4
.
.nf

echo ~/www user@example\.com
.
.fi
.
.IP "" 0
.
.P
When the command is executed it generates the output:
.
.IP "" 4
.
.nf

~/www user@example\.com
.
.fi
.
.IP "" 0
.
.P
You may reference any property in the document by full path delimited by an underscore (_) for the variable name\.
.
.P
To illustrate, a convoluted example which generates the same output as the above example but also prepends the command being executed and appends the number of options being passed to the command:
.
.IP "" 4
.
.nf

{
  "host": "user@example\.com",
  "directory": "~/www",
  "commands": {
    "local": {
      "pre": [
        {
          "command": "echo",
          "options": [
            "$json_commands_local_pre_0_command",
            "$json_directory",
            "$json_host",
            "$json_commands_local_pre_0_options_length"
          ]
        }
      ]
    }
  }
}
.
.fi
.
.IP "" 0
.
.P
The command becomes:
.
.IP "" 4
.
.nf

echo echo ~/www user@example\.com 4
.
.fi
.
.IP "" 0
.
.P
Which generates the \fIoutput\fR:
.
.IP "" 4
.
.nf

echo ~/www user@example\.com 4
.
.fi
.
.IP "" 0
.
.P
Notice how you can access array elements by index and also the the \fIlength\fR properties of array types\.
.
.SS "Command Errors"
Commands (declared by the \fIcommand\fR property) may not contain any whitespace (space, tab or newline)\. It is a JSON error to declare literal whitespace characters such as \en or \et, if these are specified using the escaped values (allowed by JSON) the program will exit with a whitespace error\.
.
.P
If you reference a variable that is unbound in a command the program will exit immediately with a >0 exit code and an error message\.
.
.SS "Command Examples"
A complete example that uses npm(1) to create a tarball, moves it to the local \fBtarget\fR staging directory and copies the tarball to a remote host prior to the main deployment process which will take the created archive (on the remote host) and deploy it to the \fItarget\fR directory:
.
.IP "" 4
.
.nf

{
  "env": {
    "archive": {
      "name": "${project_name}\-${project_version}\.tgz",
      "dir": "$target",
      "path": "${target}/${project_name}\-${project_version}\.tgz"
    }
  },
  "host": "user@example\.com",
  "directory": "~/www",
  "profiles": {
    "npm": {
      "type": "tar",
      "url": "~/$env_archive_name",
      "commands": {
        "local": {
          "pre": [
            {
              "command": "npm",
              "options": [ "pack" ]
            },
            {
              "command": "mv",
              "options": [ "$env_archive_name", "$env_archive_dir" ]
            },
            {
              "command": "scp",
              "options": [ "$env_archive_path", "${host}:~/" ]
            }
          ]
        }
      }
    }
  }
}
.
.fi
.
.IP "" 0
.
.SH "DEPLOYMENT PROCESS"
This section describes the process that task\-deploy(7) uses to perform a deployment assuming that no command line options (other than profile(s)) have been specified on the command line, see \fBOPTIONS\fR for how command line options influence behaviour\.
.
.P
Load and parse the deployment descriptor JSON document and exit with a \fI>0\fR exit code if invalid JSON is encountered\.
.
.P
Start processing of the target profiles specified on the command line, profile execution order is the order that profiles are specified on the command line or non\-determinate when executing all profiles\.
.
.P
If no profiles are specified on the command line then a \fIdefault\fR profile is assumed, see \fBDEFAULT PROFILE\fR\.
.
.P
Before profile execution starts command line options are processed that may override any settings in the deployment descriptor and the deployment descriptor is evaluated using \fBeval\fR so that variable references declared in a deployment descriptor are resolved correctly in the context of the current profile being executed\. If any errors are encountered task\-deploy(7) exits with a \fI>0\fR exit code\.
.
.P
An interactive prompt is displayed asking for confirmation that you wish to deploy the profile\.
.
.P
If global and/or profile\-specific \fIlocal\fR pre\-deployment commands have been specified they are executed, if any command exits with a \fI>0\fR exit code the deployment is aborted\.
.
.P
At this point the deployment process starts\. When running as a \fIlocal\fR deployment (using \fB\-\-local\fR) then the deployment script is copied to the local filesystem staging directory otherwise the deployment script is transferred to the staging directory on the remote host using scp(1)\.
.
.P
If global and/or profile\-specific \fIremote\fR pre\-deployment commands have been specified they are executed, if any command exits with a \fI>0\fR exit code the deployment is aborted\.
.
.P
The deployment script is executed to perform the deployment based on the deployment type for the profile, see \fBTYPES\fR\.
.
.P
If the deployment script detects any error the deployment process is aborted\.
.
.P
If global and/or profile\-specific \fIremote\fR post\-deployment commands have been specified they are executed on the remote host by the deployment script\.
.
.P
If global and/or profile\-specific \fIlocal\fR post\-deployment commands have been specified they are executed on the local host\.
.
.P
Success or failure notifications are delivered\.
.
.SH "INTERACTIVE"
Deploying code is an important process and task\-deploy(7) by design presents confirmation prompt(s) to ensure you wish to proceed\.
.
.P
This interactivity can be disabled in a variety of ways which is often necessary when executing a deployment from another program or if you are re\-deploying in quick succession\. The recommended way is to specify the \fB\-\-ok\fR option\.
.
.P
If the \fB\-\-noop\fR option is specified interactive prompt(s) are not displayed as no commands are executed\.
.
.P
Interactive prompts write to \fIstdout\fR and read from \fIstdin\fR you may also disable interactivity by piping to \fIstdin\fR or redirecting \fIstdout\fR\. For example:
.
.IP "" 4
.
.nf

echo "" | bake deploy
bake deploy > target/deploy\.log
.
.fi
.
.IP "" 0
.
.SH "NOTIFICATIONS"
If the \fIgrowlnotify\fR executable is available then a success or failure notification will be sent using \fIgrowlnotify\fR\. Note that \fIgrowlnotify\fR notifications are \fInot\fR sent for a \fBnoop\fR which is the case if the \fB\-\-noop\fR, \fB\-\-json\fR or \fB\-\-script\fR options are specified\.
.
.P
You may disable the use of growl notifications by specifying the \fB\-\-no\-growl\fR option\.
.
.SH "FILES"
All generated files are written to \fBtarget/deploy\fR\.
.
.P
When the \fB\-\-log\fR option is specified \fIstdout\fR messages are redirected to \fBtarget/deploy/deploy\.log\fR\.
.
.P
The generated script file(s) are written to \fBtarget/deploy\fR using the following naming strategy:
.
.IP "" 4
.
.nf

${name}\-${version}\-${profile}\.sh
.
.fi
.
.IP "" 0
.
.P
If the \fB\-\-write\-json\fR option is specified then the deployment settings are written to \fBtarget/deploy/settings\.json\fR\.
.
.SH "EXIT CODES"
A >0 exit code indicates failure while a 0 exit code indicates success\.
.
.SH "EXAMPLES"
Deploy using the default profile:
.
.IP "" 4
.
.nf

bake deploy
.
.fi
.
.IP "" 0
.
.P
Deploy to \fIlocalhost\fR using the default profile:
.
.IP "" 4
.
.nf

bake deploy \-\-local
.
.fi
.
.IP "" 0
.
.P
Deploy the profile \fIstage\fR:
.
.IP "" 4
.
.nf

bake deploy stage
.
.fi
.
.IP "" 0
.
.P
Deploy the profiles \fItest\fR, \fIstage\fR and \fIproduction\fR:
.
.IP "" 4
.
.nf

bake deploy test stage production
.
.fi
.
.IP "" 0
.
.P
Deploy all profiles in the descriptor:
.
.IP "" 4
.
.nf

bake deploy \-\-all
.
.fi
.
.IP "" 0
.
.P
Inspect deployment commands but do not execute them:
.
.IP "" 4
.
.nf

bake deploy \-\-noop
.
.fi
.
.IP "" 0
.
.P
List profiles in \fIdeploy\.json\fR:
.
.IP "" 4
.
.nf

bake deploy \-\-list
.
.fi
.
.IP "" 0
.
.P
List profiles in a specific descriptor:
.
.IP "" 4
.
.nf

bake deploy \-\-list \-\-descriptor ~/project/deploy\.json
.
.fi
.
.IP "" 0
.
.P
Print the script that will be used for deployment:
.
.IP "" 4
.
.nf

bake deploy \-\-script
.
.fi
.
.IP "" 0
.
.P
Inspect the settings used for a \fIdefault\fR deployment:
.
.IP "" 4
.
.nf

bake deploy \-\-json \-\-pretty \e
    \-\-staging ~/project\-staging \e
    \-\-name project \e
    \-\-directory ~/www
.
.fi
.
.IP "" 0
.
.P
Display this man page:
.
.IP "" 4
.
.nf

bake help deploy
.
.fi
.
.IP "" 0
.
.SH "ROADMAP"
Add npm(1) deployment type\.
.
.P
Add rsync(1) deployment type\.
.
.P
Implement lock files for the local and remote scripts to prevent concurrency issues when multiple deployments are attempted\.
.
.P
Add ability to rollback a deployment if an existing \fBtarget\fR directory existed prior to deployment and the deployment process fails (such as due to a network error)\.
.
.P
Add \fB\-\-branch\fR option to specify a git branch to use for all profiles that are of the \fBgit\fR type\.
.
.P
Add \fB\-\-refspec\fR option so that \fBgit\fR deployments may also be done from tags\.
.
.P
Implement notifications using \fBmail\fR\.
.
.P
Attach log file(s) to \fBmail\fR notifications\.
.
.P
Add the \fBdeploy_ssh_options\fR and \fBdeploy_scp_options\fR environment variables so that custom options (such as port numbers) can be passed on to ssh(1) and scp(1)\.
.
.P
Add \fBenable\fR boolean property to profiles in a descriptor to prevent deployment of a profile\.
.
.SH "BUGS"
\fBtask\-deploy\fR is written in bash and depends upon \fBbash\fR >= 4\.2\.
.
.SH "COPYRIGHT"
\fBtask\-deploy\fR is copyright (c) 2012 muji \fIhttp://xpm\.io\fR
.
.SH "SEE ALSO"
bake(1), task\-deploy\-json(7)

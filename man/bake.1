.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BAKE" "1" "January 2013" "" ""
.
.SH "NAME"
\fBbake\fR \- make for bash
.
.SH "SYNOPSIS"
\fBbake\fR command [\fIoptions\fR\.\.\.]
.
.br
.
.SH "DESCRIPTION"
\fBbake\fR is \fBmake\fR for bash programs\. It provides an extensible system for managing project tasks using modular code\.
.
.SH "BUILTIN TASKS"
All bake(1) projects have the following tasks built in task\-test(7), task\-clean(7), task\-ls(7), task\-doc(7) and task\-semver(7)\.
.
.SH "REQUIRE TASKS"
The convention is that task methods are not declared in tasks(7) but are placed in modules and then included using require(3)\. So to include the task\-todo(7) functionality into your project all you need to do is require(3) it:
.
.IP "" 4
.
.nf

require \'tasks/todo\';
.
.fi
.
.IP "" 0
.
.SH "FILES"
The bake(1) program looks for a tasks(7) file in the current working directory\. If no tasks(7) file is found in the current working directory then bake(1) will walk all parent directories looking for a tasks(7) file\.
.
.P
It maps commands (the first option passed to bake(1)) to task method(s) declared by the tasks file\. A command is considered to be the first option passed to the \fBbake\fR executable, any other options specified on the command line are passed to the corresponding task method\.
.
.SH "ENVIRONMENT"
The following variables are available to each task command:
.
.TP
\fBroot\fR:

.
.P
The directory where the \fBtasks\fR file is located\.
.
.TP
\fBproject_name\fR:

.
.P
The name of the project as determined by the name of the \fB${root}\fR directory\.
.
.TP
\fBproject\fR:

.
.P
This is the root of the project\. For most projects this will be equivalent to \fB${root}\fR but is useful for multi\-module projects where \fB${root}\fR points to the directory for the module and \fB${project}\fR is the root of the project\.
.
.TP
\fBtarget\fR:

.
.P
A temporary \fBtarget\fR directory corresponding to \fB${root}/target\fR\.
.
.TP
\fBtasks\fR:

.
.P
The file system path to the tasks file, eg: \fB${root}/tasks\fR\.
.
.TP
\fBbake_file_name\fR:

.
.P
Determines the name of the file that bake(1) looks for to load task command methods from, default is \fItasks\fR\.
.
.TP
\fBtasks_file_name\fR:

.
.P
The name of the \fBtasks\fR file, if \fBbake_file_name\fR has been set this will equal that value, otherwise the default \fItasks\fR is used\.
.
.SH "EXIT CODES"
A >0 exit code is used when no task(7) file could be located or no command is available, otherwise the exit code is deferred to the task being executed\.
.
.TP
\fB1\fR:

.
.P
No task(7) file available in the current working directory (or any parent directories)\.
.
.TP
\fB2\fR:

.
.P
No task command available\.
.
.TP
\fB>0\fR:

.
.P
The task command invocation returned a non\-zero exit code but did not explicitly call \fBexit\fR\.
.
.P
It is recommended that task command implementations explicitly exit the program using the \fBquit\fR and \fBsuccess\fR commands declared by console(3)\.
.
.SH "BUGS"
\fBbake\fR is written in bash and depends upon \fBbash\fR >= 4\.2\.
.
.SH "COPYRIGHT"
\fBbake\fR is copyright (c) 2012 muji \fIhttp://xpm\.io\fR
.
.SH "SEE ALSO"
task\-test(7), task\-doc(7), task\-clean(7), task\-ls(7), task\-semver(7)

# test(s) for encoding set and unset variables
function test.json.stringify.basic {
	local result;
	
	# test that an unset variable is detected
	json.stringify <<< "missing_doc";
	assert.eq "1" "$?";
	
	# test that a set variable is detected
	local doc="mydocument";
	json.stringify <<< "doc";
	assert.eq "0" "$?";
	
	# test that a variable set to the empty string converts to ""
	doc="";
	json.stringify <<< "doc";
	assert.eq "0" "$?";
	result=$( json.string );
	assert.equal '""' "$result";
	
	# test that a set array is detected
	declare -a myarray;
	myarray=( 1 2 3 );
	json.stringify <<< "myarray";
	assert.eq "0" "$?";	
	result=$( json.string );
	assert.equal "[1,2,3]" "$result";
	
	# test that a declared but unset array converts to []
	declare -a mynewarray;
	json.stringify <<< "mynewarray";
	assert.eq "0" "$?";
	result=$( json.string );
	assert.equal "[]" "$result";
	
	# test that a set local array is valid
	local localarr=( 1 2 3 );
	json.stringify <<< "localarr";
	assert.eq "0" "$?";
	result=$( json.string );
	assert.equal "[1,2,3]" "$result";	
	
	# test that a set local but empty local array converts to []
	local emptyarr=();
	json.stringify <<< "emptyarr";
	assert.eq "0" "$?";
	result=$( json.string );
	assert.equal "[]" "$result";	
	
	# test that a declared but unset associative array converts to {}
	declare -A myassoc;
	json.stringify <<< "myassoc";
	assert.eq "0" "$?";
	result=$( json.string );
	assert.equal "{}" "$result";
	
	# test that a declared and set associative array is valid
	declare -A mynewassoc;
	mynewassoc[key]="value";
	json.stringify <<< "mynewassoc";
	assert.eq "0" "$?";
	result=$( json.string );
	assert.equal '{"key":"value"}' "$result";
	
	# TODO: null / numbers
}

# test(s) for encoding boolean values
function test.json.stringify.boolean {
	local result doc="true";
	json.stringify <<< "doc";
	result=$( json.string );	
	assert.equal "true" "$result";
	
	doc="false";
	json.stringify <<< "doc";
	result=$( json.string );	
	assert.equal "false" "$result";
	
	doc=true;
	json.stringify <<< "doc";
	result=$( json.string );	
	assert.equal "true" "$result";
	
	doc=false;
	json.stringify <<< "doc";
	result=$( json.string );	
	assert.equal "false" "$result";	
}

# test(s) for encoding null values
function test.json.stringify.null {
	local result doc="null";
	json.stringify <<< "doc";
	result=$( json.string );
	assert.equal "null" "$result";
	
	doc=null;
	json.stringify <<< "doc";
	result=$( json.string );	
	assert.equal "null" "$result";
}

# test(s) for encoding an integers
function test.json.stringify.integer {
	local result doc="127";
	json.stringify <<< "doc";
	result=$( json.string );
	assert.equal "127" "$result";
	
	doc=127;
	json.stringify <<< "doc";
	result=$( json.string );
	assert.equal "127" "$result";
	
	doc="-127";
	json.stringify <<< "doc";
	result=$( json.string );
	assert.equal "-127" "$result";
	
	doc=-127;
	json.stringify <<< "doc";
	result=$( json.string );
	assert.equal "-127" "$result";		
}
# runs all local deployment tests
test.deploy.local() {
	local self;
	require.resolve "self";
	local dir="${self[1]}";
	
	# stash bake(1) variables
	declare -A info;
	info[root]="${root}";
	info[project]="${project}";	
	info[target]="${target}";
	info[project_name]="${project_name}";
	info[project_version]="${project_version}";
	
	# set up a mock directory structure
	local deploy_test="${target}/deploy-test";
	local staging="${deploy_test}/staging";
	local directory="${deploy_test}/www";
	local bundles="${deploy_test}/bundles";
	local descriptors="${dir}/descriptors";
	local descriptor="";
	
	# override name / semver
	# for these tests to match the
	# values for the mock project
	# bake(1) will have set them
	# to strike@0.0.1 etc.
	project_name="project";
	project_version="0.0.1";
	local project_source="${dir}/${project_name}";
	
	# initialize the mock project as a git repository
	# so that validation will pass with the default profile
	if [ ! -d "${project_source}/.git" ]; then
		(
			cd "${project_source}" \
				&& git init \
				&& git add . \
				&& git commit -m "Deploy test initial commit" \
				&& git remote add origin "${project_source}";
		)
	fi
	
	declare -A expects;
	expects[name]="$project_name";
	expects[version]="$project_version";
	expects[project]="$project_name-$project_version";
	
	# setup the mock target staging directory
	declare -x target="${project_source}/target";
	mkdir -p "${project}/target";
	
	# use a different algorithm for testing
	local algorithm="256";
	
	# options common to all tests
	local options=(
		--ok
		--local
		--gz
		--no-growl
		--sha "${algorithm}"
		--staging "${staging}"
		--directory "${directory}"
		--output "${bundles}"
	);
	
	# run tests that should pass
	:test.deploy.run ':test.deploy.env';
	
	:test.deploy.run ':test.deploy.minimal.bundle';
	:test.deploy.run ':test.deploy.minimal.deploy';
		
	:test.deploy.run ':test.deploy.project.bundle';
	:test.deploy.run ':test.deploy.project.deploy';
	
	:test.deploy.run ':test.deploy.project.tar.bundle';
	:test.deploy.run ':test.deploy.project.tar.deploy';
	
	:test.deploy.run ':test.deploy.project.git.bundle';
	:test.deploy.run ':test.deploy.project.git.deploy';
	
	:test.deploy.run ':test.deploy.project.npm.bundle';
	:test.deploy.run ':test.deploy.project.npm.deploy';
	
	:test.deploy.run ':test.deploy.bundle.scripts';	
	
	# clean up the mock project .git directory
	if [ -d "${project_source}/.git" ]; then
		rm -rfv "${project_source}/.git" >> "${root}/target/deploy.test.clean.log";
	fi	
}

# run a test, we want to ensure
# that we have a fresh mock structure
# for each test
:test.deploy.run() {
	local cmd="$1";
	
	# clean up before we start
	:test.deploy.clean;	
	
	# create fresh mock directories
	:test.deploy.init;
	# run the test
	$cmd;
	# clean up at the end
	:test.deploy.clean;
}

# test environment is sane
:test.deploy.env() {
	descriptor="${project_source}/env.json";
	local opts=( ${options[@]} );
	opts+=( --global-env --print-env --descriptor "${descriptor}" );

	tasks.deploy "${opts[@]}";
	
	# env_ variables
	assert.equal "" "${env_non_existent:-}";
	assert.equal "" "${env_unset}";
	assert.equal "${HOME:-}" "${env_home}";
	assert.equal "${USER:-}" "${env_user}";
	assert.equal "${PATH:-}" "${env_path}";
	assert.equal "${SHELL:-}" "${env_shell}";
	assert.equal "bar" "${env_foo}";
	assert.equal "bar" "${env_bad_name_format}";
	assert.equal '`bar`' "${env_backtick}";
	assert.equal "rmdir target" "${env_rmdir}";
	assert.equal '`rmdir target`' "${env_rmdir_backtick}";
	assert.equal 'a && b' "${env_and}";
	assert.equal 'c || d' "${env_or}";
	assert.equal '2 + 2' "${env_4}";
	assert.equal '[[ "abc" =~ a ]]' "${env_regex}";
	assert.equal 'ls -la &' "${env_bgjob}";
	assert.equal 'a\bc' "${env_backslash}";
	assert.equal '$HOME' "${env_home_escaped}";
	assert.equal '!history' "${env_history}";
	assert.equal '#!/usr/bin/env bash -x' "${env_shebang}";
	
	# TODO: this should be a literal newline
	assert.equal 'first\nsecond' "${env_newline}";
	
	assert.equal "${expects[name]}" "${env_project_name}";
	assert.equal "${expects[version]}" "${env_project_version}";
	assert.equal "${target}" "${env_archive_dir}";
	assert.equal "${expects[name]}-${expects[version]}.tgz"	"${env_archive_name}";
	assert.equal "${target}/${expects[name]}-${expects[version]}.tgz" "${env_archive_path}"
	
	# doc_ variables
	assert.equal "${expects[name]}" "${doc_name}";
	
	assert.equal "a" "${doc_data_array_0}";
	assert.equal "b" "${doc_data_array_1}";
	assert.equal "c" "${doc_data_array_2}";
	assert.equal "d e f" "${doc_data_array_3}";
	assert.eq 4 "${doc_data_array_length}";
}

# MINIMAL

# test bundling the default profile
# using the absolute minimal descriptor
:test.deploy.minimal.bundle() {
	local profile="default";
	descriptor="${project_source}/minimal.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" );
	( tasks.deploy "${opts[@]}" );
	:test.assert.bundle "${bundles}/${expects[project]}-${profile}";
}

# test deploying the default profile
# using the absolute minimal descriptor
:test.deploy.minimal.deploy() {
	local profile="default";	
	descriptor="${project_source}/minimal.json";
	local opts=( ${options[@]} );
	opts+=( --descriptor "${descriptor}" );
	( tasks.deploy "${opts[@]}" );
	assert.dir.exists? "${directory}/${expects[name]}/${profile}";
}

# PROJECT

## DEFAULT PROFILE

:test.deploy.project.bundle() {
	local profile="default";	
	descriptor="${project_source}/deploy.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" );
	( tasks.deploy "${opts[@]}" );
	:test.assert.bundle "${bundles}/${expects[project]}-${profile}";
}

:test.deploy.project.deploy() {
	local profile="default";	
	descriptor="${project_source}/deploy.json";
	local opts=( ${options[@]} );
	opts+=( --descriptor "${descriptor}" );
	( tasks.deploy "${opts[@]}" );
	
	# check common files
	:test.assert.deployment.files "${directory}/${expects[name]}/${profile}";
}

## TAR TYPE

:test.deploy.project.tar.bundle() {
	local profile="deploy-tar";
	descriptor="${project_source}/${profile}.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" "$profile" );
	( tasks.deploy "${opts[@]}" );
	:test.assert.bundle "${bundles}/${expects[project]}-${profile}";
}

:test.deploy.project.tar.deploy() {
	local profile="deploy-tar";
	descriptor="${project_source}/${profile}.json";
	local opts=( ${options[@]} );
	opts+=( --descriptor "${descriptor}" "$profile" );
	( tasks.deploy "${opts[@]}" );
	
	# check common files
	:test.assert.deployment.files "${directory}/${expects[name]}/$profile";
}

## GIT TYPE

:test.deploy.project.git.bundle() {
	local profile="deploy-git";
	descriptor="${project_source}/${profile}.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" "$profile" );
	( tasks.deploy "${opts[@]}" );
	:test.assert.bundle "${bundles}/${expects[project]}-${profile}";
}

:test.deploy.project.git.deploy() {
	local profile="deploy-git";	
	descriptor="${project_source}/${profile}.json";
	local opts=( ${options[@]} );
	opts+=( --descriptor "${descriptor}" "$profile" );
	( tasks.deploy "${opts[@]}" );
	
	# check common files
	:test.assert.deployment.files "${directory}/${expects[name]}/$profile";
}

## NPM TYPE

:test.deploy.project.npm.bundle() {
	local profile="deploy-npm";
	descriptor="${project_source}/${profile}.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" "$profile" );
	( tasks.deploy "${opts[@]}" );
	:test.assert.bundle "${bundles}/${expects[project]}-${profile}";
}

:test.deploy.project.npm.deploy() {
	local profile="deploy-npm";
	descriptor="${project_source}/${profile}.json";
	local opts=( ${options[@]} );
	opts+=( --descriptor "${descriptor}" "$profile" );
	( tasks.deploy "${opts[@]}" );
	
	# check common files
	:test.assert.deployment.files "${directory}/${expects[name]}/$profile";
}

# BUNDLE SCRIPTS

:test.deploy.bundle.scripts() {
	local profile="bundle-scripts";
	descriptor="${project_source}/${profile}.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" "$profile" );
	( tasks.deploy "${opts[@]}" );
	:test.assert.bundle "${bundles}/${expects[project]}-${profile}";
}

# UTIL

# assert on generated bundles/checksums
:test.assert.bundle() {
	local final="$1";
	assert.file.exists? "${final}.tgz";
	assert.file.exists? "${final}.sha${algorithm}";	
}

# assert on files that should be present
# for all deployments
:test.assert.deployment.files() {
	local final="$1";
	
	assert.dir.exists? "${final}";
	assert.file.exists? "${final}/README.md";
	assert.file.exists? "${final}/LICENSE";
	assert.file.exists? "${final}/version";
	assert.dir.exists? "${final}/doc";
	assert.file.exists? "${final}/doc/README.md";
}

# create the test staging structure
:test.deploy.init() {
	mkdir -p "$staging";
	mkdir -p "$directory";
	mkdir -p "$bundles";
}

# clean the test staging directory
:test.deploy.clean() {
	if [ -d "${deploy_test}" ]; then
		console.info "deploy.test clean %s" "$deploy_test";
		# NOTE: we use ${root}/target rather than ${target}
		# NOTE: as ${target} points to the mock project staging directory
		rm -rfv "$deploy_test" >> "${root}/target/deploy.test.clean.log";
	fi
}
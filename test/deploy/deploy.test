# test running with the --json option, implies --noop

# runs all local deployment tests
test.deploy.local() {
	local self;
	require.resolve "self";
	local dir="${self[1]}";
	
	# set up a mock directory structure
	local deploy_test="${target}/deploy-test";
	local staging="${deploy_test}/staging";
	local directory="${deploy_test}/www";
	local bundles="${deploy_test}/bundles";
	local descriptors="${dir}/descriptors";
	local descriptor="";
	
	# override name / semver
	# for these tests to match the
	# values for the mock project
	# bake(1) will have set them
	# to strike@0.0.1 etc.
	project_name="project";
	project_version="0.0.1";	
	local project="${dir}/${project_name}";
	
	declare -A expects;
	expects[name]="$project_name";
	expects[version]="$project_version";
	expects[project]="$project_name-$project_version";
	
	# setup the mock target staging directory
	target="${project}/target";
	mkdir -p "${project}/target";
	
	# options common to all tests
	local options=(
		--ok	
		--local
		--no-growl		
		--staging "${staging}"
		--directory "${directory}"
		--output "${bundles}"
	);
	
	# run tests that should pass
	:test.deploy.run ':test.deploy.minimal.bundle';	
	:test.deploy.run ':test.deploy.project.bundle';
	
	# :test.deploy.run ':test.deploy.minimal.deploy';	
}

# run a test, we want to ensure
# that we have a fresh mock structure
# for each test
:test.deploy.run() {
	local cmd="$1";
	
	# clean up before we start
	:test.deploy.clean;	
	
	# create fresh mock directories
	:test.deploy.init;
	# run the test
	$cmd;
	# clean up at the end
	:test.deploy.clean;
}

# MINIMAL

# test bundling the default profile
# using the absolute minimal descriptor
:test.deploy.minimal.bundle() {
	descriptor="${descriptors}/minimal.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" );
	( tasks.deploy "${opts[@]}" );
	assert.file.exists? "${bundles}/${expects[project]}-default.tgz";
}

# test deploying the default profile
# using the absolute minimal descriptor
:test.deploy.minimal.deploy() {
	descriptor="${descriptors}/minimal.json";
	local opts=( ${options[@]} );
	opts+=( --descriptor "${descriptor}" );
	( tasks.deploy "${opts[@]}" );
	assert.dir.exists? "${directory}/${expects[name]}/default";
}

# PROJECT

# test bundling the default profile
# for the mock project
:test.deploy.project.bundle() {
	descriptor="${project}/deploy.json";
	local opts=( ${options[@]} );
	opts+=( --bundle --descriptor "${descriptor}" );
	( tasks.deploy "${opts[@]}" );
	assert.file.exists? "${bundles}/${expects[project]}-default.tgz";
}

# :test.deploy.json.dump() {
# 	
# 	# get the configuration setting as a json document
# 	local json=$( tasks.deploy --local --json --staging "${staging}" );
# 	
# 	printf "${json}\n";
# 
# 	# parse the output
# 	json.parse <<< "${json}";
# 	
# 	# should not have the staging directory
# 	assert.dir.exists! "${staging}";
# 	
# 	# check json dump properties
# 	assert.equal "${staging}" "${json_doc[profiles.default.staging]}";
# 	# noop should be true
# 	assert.equal "true" "${json_doc[noop]}";
# }

# UTIL

# create the test staging structure
:test.deploy.init() {
	mkdir -p "$staging";
	mkdir -p "$directory";
	mkdir -p "$bundles";
}

# clean the test staging directory
:test.deploy.clean() {
	if [ -d "${deploy_test}" ]; then
		console.info "deploy.test clean %s" "$deploy_test";
		rm -rfv "$deploy_test" >> "${target}/deploy.test.clean.log";
	fi
}
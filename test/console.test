# test for info messages
function test.console.info {
	console.info "this is an info message, %s" 'but nothing really to report';
	assert.eq "0" "$?";
}

# test for error messages
function test.console.error {
	console.error "this is an error message, %s" 'but nothing is wrong';
	assert.eq "0" "$?";
}

# test for warn messages
function test.console.warn {
	console.warn "this is a warning, %s" 'but nothing really went wrong';
	assert.eq "0" "$?";
}

# test for stack trace
function test.console.trace {
	console.trace;
	assert.eq "0" "$?";
}

# test for throwing an unknown error
function test.console.throw.unknown {
	console.throw;
	assert.eq "0" "$?";
}

# test for calling success
function test.console.success {
	success "success, everything is really fine with this test" &
	wait %%;
	assert.eq "0" "$?";
}

# test for calling quit with no options
function test.console.quit {
	quit &
	wait %%;
	assert.eq "1" "$?";
}

# test for calling quit with a specific exit code
function test.console.quit.code {
	quit 127 &
	wait %%;
	assert.eq "127" "$?";
}

# test for calling quit with a specific exit code and error message
function test.console.quit.code.message {
	quit 127 "we quit the program with %s, but everything is really fine" "127" &
	wait %%;
	assert.eq "127" "$?";
}

# test for redirecting stdout to a log file
function test.console.stdout.log {
	local logfile="${target}/${FUNCNAME}";
	
	# redirect stdout to a log file
	console.log.stdout "$logfile";
	
	# send the message to the log file
	console.info "this is a message redirected to a stdout log file %s" "$logfile";
	
	# assert
	local expected="[info] this is a message redirected to a stdout log file $logfile";
	local received="`cat "$logfile"`";
	assert.equal "$expected" "$received";
	
	# clean up
	rm "$logfile";
	
	# revert the log file redirection
	console.log.stdout.close;
}

# test for redirecting stderr to a log file
function test.console.stderr.log {
	local logfile="${target}/${FUNCNAME}";
	
	# redirect stderr to a log file
	console.log.stderr "$logfile";
	
	# send the error message to the log file
	console.error "this is a message redirected to a stderr log file %s" "$logfile";
	
	# assert
	local expected="[not ok] this is a message redirected to a stderr log file $logfile";
	local received="`cat "$logfile"`";
	assert.equal "$expected" "$received";
	
	# clean up
	rm "$logfile";
	
	# revert the log file redirection
	console.log.stderr.close;
}
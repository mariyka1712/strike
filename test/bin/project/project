#! /usr/bin/env bash

set -o errtrace;
set -o errexit;
set -o nounset;

######################################################################
#
#	BOILERPLATE
#
######################################################################
console_print_program_prefix="off";
declare -gx exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../../../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

process.use strict;

require 'assert';
require.once 'tasks/project';

# tests for task-project(7)
function test.project {
	
	# mimic running from bake(1)
	# and switch the `root` to `target`
	# so we don't conflict with any projects.json
	# file for this project
	local target="${library_dirs[root]}/target";
	local root="${target}";
	local tasks="tasks";
	local projectfile="${target}/projects.json";
	
	if [ ! -d "${target}" ]; then
		mkdir -p "${target}" || quit 1 "could not create target directory %s" "${target}";
	fi
	
	# potentially hanging around from a previous failure
	# clean up to give us the best chance of success
	if [ -f "${projectfile}" ]; then
		rm "${projectfile}" || quit 1 "could not remove %s" "${projectfile}";
	fi
	
	declare -A json_expected;
	json_expected[init]=$( < "$exedir/init.json" );
	json_expected[added1]=$( < "$exedir/added.1.json" );
	
	# last exit code
	local code=1;
	
	# dummy project in `target`
	local test_project_name="test-project";
	local test_project_path="./target/test/${test_project_name}";
	
	# create the test project
	mkdir -p "${test_project_path}";	
	
	# switch off errexit for these tests
	set +o errexit;
	
	# initialize an empty projects.json file
	tasks.project init & wait %%;
	assert.eq "0" "$?";
	assert.file.exists? "${projectfile}";
	
	# test print command
	local contents=$( tasks.project print );
	assert.equal "${json_expected[init]}" "$contents";
	
	# add a project
	tasks.project add "test-project" "${test_project_path}";
	assert.eq "0" "$?";
	
	# test print command
	contents=$( tasks.project print );
	assert.equal "${json_expected[added1]}" "$contents";
	
	# test exists command
	tasks.project exists "${test_project_name}" & wait %%;
	assert.eq "0" "$?";
	tasks.project exists "non-existent-project" 2> /dev/null & wait %%;
	assert.eq "1" "$?";
	
	# test ls command
	local projects=( $( tasks.project ls ) );
	assert.equal "${test_project_name}" "${projects[0]}";
	assert.equal "${test_project_path}" "${projects[1]}";
	
	# clean up so subsequent test runs will succeed
	{ rm "${projectfile}" && console.info "removed project file %s" "$projectfile"; };
}

test.project;
exit 0;
#! /usr/bin/env bash 
# -vx

set -o errtrace;
set -o errexit;
set -o nounset;

######################################################################
#
#	BOILERPLATE
#
######################################################################
console_print_program_prefix="off";
declare -gx exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../../../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

# switch on strict mode
process.use strict;

require 'assert';
require 'tasks/todo';

# let assert(3) know if this test
# is being run standalone or as
# part of a task-test(7) test suite
assert.parse "$@";

# TODO: complete these tests
function todo {
	local file="$exedir/1.notes.todo";
	#echo "test todo .. $exedir/notes.todo"
	
	# mimic running from bake(1)
	local root="${library_dirs[root]}";
	local target="${root}/target";
	local tasks="tasks";
	declare -A expects_count;
	expects_count[1.notes.todo]="3";
	local commands=( count );
	# invocation type prefixes
	local types=( "$exedir/bake" "tasks." "delegate" );
	declare -A delimiters;
	delimiters[0]=' ';
	delimiters[1]='.';
	delimiters[2]=' ';
	local invocation delimiter;
	local f;
	# for f in ${exedir}/*.todo
	# 	do
	# 		echo "got file $f";
	# 		declare -i index=0;
	# 		for invocation in ${types[@]}
	# 			do
	# 				delimiter="${delimiters[$index]}";
	# 				echo "got invocation ... $invocation : '$delimiter'";
	# 				#set +o nounset;
	# 				: $(( index++ ));
	# 				#set -o nounset;					
	# 		done
	# done
	
	#echo "got file $file"
	tasks.todo scan --file "$file" & wait %%;
	
	# invoke the task function
	#delegate "tasks" "todo" scan --file "$file" || quit $? "task %s failed" "$func";
	
	#echo "AFTER SCAN !!!! $?";
}

todo;
assert.summary;
exit 0;
#! /usr/bin/env bash

# test file for running executables
# from various filesystems paths
# relative, absolute, relative parent

######################################################################
#
#	BOILERPLATE
#
######################################################################
console_print_program_prefix="off";
declare -gx exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

function paths {
	local parent="`dirname ${BASH_SOURCE[0]}`";
	parent="`dirname "$parent"`";
	declare -A messages;
	messages["./bake"]="relative binary path ok";
	messages["${PWD}/bake"]="absolute symlink path ok";
	messages["${PWD}/bin/bake"]="absolute binary path ok";
	messages["../bin/bake"]="parent binary path ok";
	messages["../bake"]="parent symlink path ok";
	declare -a paths;
	paths+=( "./bake" );
	paths+=( "${PWD}/bake" );
	paths+=( "${PWD}/bin/bake" );

	local changed=false;
	
	# relative should come last
	paths+=( "../bin/bake" );
	paths+=( "../bake" );
	for path in ${paths[@]}
		do
			msg="${messages["$path"]}";
			# run the relative reference correctly
			if ! $changed && [[ "$path" =~ ^\.\./ ]]; then
				cd "${library_dirs[root]}/test";
				changed=true;
			fi
			if [ ! -x "$path" ]; then
				console.warn "%s is not executable" "$path";
				exit 1;
			fi
			"$path" list && console.info "$msg (%s)" "$path";
			if [ $? -ne 0 ]; then
				console.quit 1 "path test failed for %s" "$path";
			fi
	done
	
	# revert working directory
	cd "${process_dirs[owd]}";
}

paths;
exit 0;
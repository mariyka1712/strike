#!/usr/bin/env bash

: <<'ronn:markdown'
console(1) -- test program for console(3)
=============================================

## SYNOPSIS

	console [options] message [replacements...]

## DESCRIPTION

Prints messages using ANSI sequences.

## USAGE

When invoked with no options this program prints a series of test messages for console(3). When options are specified they are passed on to console(3).

Run `console help console` to view the console(3) manual.

## EXAMPLES

Print test messages:

	console
	
Print test messages with no ANSI sequences:

	console --no-color

## BUGS

**console** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**console** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

console(3)
ronn:markdown

######################################################################
#
#	BOILERPLATE
#
######################################################################
export exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

# switch on strict mode
process.use strict;

# configure help
require 'help';
help.man.page "default" "console.1";
help.man.page "console" "console.3";
help.parse "$@";

require 'opts/version';
version.parse "$@";

require.once 'console';

# read -ep $'\001\033[1m\002ABC\001\033[0m\002' value;
# exit 0;

# test header colours
console.test.headers() {
	local title="${1:-HEADER COLORS}";
	local opts="${2:-}";
	console header;	
	console print "${title}";
	console header;
	console header $opts --color=bold;
	# console header $opts --color=underline;
	console header $opts --color=red;
	console header $opts --color=green;
	console header $opts --color=brown;
	console header $opts --color=blue;
	console header $opts --color=magenta;
	console header $opts --color=cyan;
	console header $opts --color=gray;
	console header $opts --color=yellow;
	console header $opts --color=white;
	console header;
}

# test colors
console.test.colors() {
	console header;
	console print "COLORS";
	console header;
	
	# colors
	console --color=bold "a %s message" "bold";
	console --color=underline "an %s message" "underline";
	console --color=black "a %s message" "black";
	console --color=red "a %s message" "red";
	console --color=green "a %s message" "green";
	console --color=brown "a %s message" "brown";
	console --color=blue "a %s message" "blue";
	console --color=magenta "a %s message" "magenta";

	console --color=cyan "a %s message" "cyan";
	console --color=gray "a %s message" "gray";
	console --color=yellow "a %s message" "yellow";
	console --color=white "a %s message" "white";	
	console header;
}

# test message types
console.test.types() {
	local title="${1:-TYPES}";
	local opts="${2:-}";
	console print "${title}";
	console header;
	
	#echo "using opts: $opts"
	
	console header;
	console print "STDOUT";
	console header;
	
	console log $opts "a %s message" "log";
	console info $opts "an %s message" "info";
	console ok $opts "an %s message" "ok";
	
	console header;
	console print "STDERR";
	console header;
	
	console debug $opts "a %s message" "debug";
	console warn $opts "a %s message" "warning";
	console error $opts "an %s message" "error";
	console throw $opts "an error message with a stack trace";
	console notok $opts "a %s message" "not ok";
	console header;
	( console quit 127 $opts "a %s message" "quit" );
	( console success $opts "a %s message" "success" );
	
	console header;	
}

# test for using printf
console.test.printf() {
	local title="${1:-PRINTF}";
	local opts="${2:-}";
	local value;
	console print "${title}";
	console header;
	
	console info "a %s value" "string";
	console info -- "-a %s value" "-hyphenated";
	console info "a %q value" "quoted value []";
	
	console header;
}

# test displaying a prompt
console.test.prompt() {
	local title="${1:-PROMPT}";
	local opts="${2:-}";
	local value;
	console print "${title}";
	console header;
	
	# test prompt for comparison
	# read -ep $'\001\033[1m\002bold\001\033[0m\002 prompt'" ${characters[lightning]} " value;
	# local start=$'\001\033[1m\002';
	# local terminator=$'\001\033[0m\002';	
	# local PS9="${start}bold${terminator} prompt ${characters[lightning]} ";
	# read -ep "${PS9}" value;
	
	console prompt "%s prompt" "bold";
	read -ep "$PS9" value;
	console prompt --color=underline "%s prompt" "underline";
	read -ep "$PS9" value;
	
	console prompt --color=black "%s prompt" "black";
	read -ep "$PS9" value;	
	console prompt --color=red "%s prompt" "red";
	read -ep "$PS9" value;
	console prompt --color=green "%s prompt" "green";
	read -ep "$PS9" value;
	console prompt --color=brown "%s prompt" "brown";
	read -ep "$PS9" value;
	console prompt --color=blue "%s prompt" "blue";
	read -ep "$PS9" value;
	console prompt --color=magenta "%s prompt" "magenta";
	read -ep "$PS9" value;
	console prompt --color=cyan "%s prompt" "cyan";
	read -ep "$PS9" value;
	console prompt --color=gray "%s prompt" "gray";
	read -ep "$PS9" value;	
	
	console header;
}

# print test messages
console.test() {
	console.test.headers;
	console.test.colors;
	console.test.types;
	console.test.printf;
	console.test.prompt;
	
	# console.test.types "TYPES (NO PREFIX)" "--no-prefix";


	# console -c "standard message for you ... %s" "abc def ghi";
	# console -n "simple message for you ... %s" "abc";
	# console -n2 "simple error message for you ... %s" "abc";
	# 
	# console -2 --color=red --prefix="[red]" "simple %s message for you ... %s" "warning" "a value for you";
	# console -2 --color=cyan --prefix="[cyan]" "simple %s message for you ... %s" "warning" "a value for you";	
}

if [ $# -eq 0 ]; then
	console.test;
else
	if [ $# -eq 1 ] && [ $1 == "${console_no_color_option}" ]; then
		shift;
		console.test;
		exit 0;
	fi
	console "$@";
fi
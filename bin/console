#!/usr/bin/env bash -i

: <<'ronn:markdown'
console(1) -- test program for console(3)
=============================================

## SYNOPSIS

	console [options] message [replacements...]

## DESCRIPTION

Prints messages using ANSI sequences.

## USAGE

When invoked with no options this program prints a series of test messages for console(3). When options are specified they are passed on to console(3).

Run `console help console` to view the console(3) manual.

## EXAMPLES

Print test messages:

	console
	
Print test messages with no ANSI sequences:

	console --no-color

## BUGS

**console** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**console** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

console(3)
ronn:markdown

######################################################################
#
#	BOILERPLATE
#
######################################################################
export exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

# switch on strict mode
process.use strict;

# configure help
require 'help';
help.man.page "default" "console.1";
help.man.page "console" "console.3";
help.man.page "sprintf" "sprintf.3";
help.parse "$@";

require 'opts/version';
version.parse "$@";

# read -ep $'\001\033[1m\002ABC\001\033[0m\002' value;
# exit 0;

# test header colours
console.test.headers() {
	local title="${1:-HEADER COLORS}";
	local opts="${2:-}";
	console header;	
	console title "${title}";
	console header;
	
	console header $opts --color=black;	
	console header $opts --color=red;
	console header $opts --color=green;
	console header $opts --color=brown;
	console header $opts --color=blue;
	console header $opts --color=magenta;
	console header $opts --color=cyan;
	console header $opts --color=gray;
	
	console header $opts --color=bright-black;	
	console header $opts --color=bright-red;
	console header $opts --color=bright-green;
	console header $opts --color=bright-brown;
	console header $opts --color=bright-blue;
	console header $opts --color=bright-magenta;
	console header $opts --color=bright-cyan;
	console header $opts --color=bright-gray;
	
	console header;
}

# test colors
console.test.colors() {
	local title="${1:-COLORS}";
	console header;
	console title "${title}";
	console header;
	
	console print --color=black "a %s message" "black";
	console print --color=red "a %s message" "red";
	console print --color=green "a %s message" "green";
	console print --color=brown "a %s message" "brown";
	console print --color=blue "a %s message" "blue";
	console print --color=magenta "a %s message" "magenta";
	console print --color=cyan "a %s message" "cyan";
	console print --color=gray "a %s message" "gray";
	
	console print --color=bright-black "a %s message" "bright-black";
	console print --color=bright-red "a %s message" "bright-red";
	console print --color=bright-green "a %s message" "bright-green";
	console print --color=bright-brown "a %s message" "bright-brown";	
	console print --color=bright-blue "a %s message" "bright-blue";
	console print --color=bright-magenta "a %s message" "bright-magenta";
	console print --color=bright-cyan "a %s message" "bright-cyan";
	console print --color=bright-gray "a %s message" "bright-gray";	
	
	console header;
}

# test message types
console.test.types() {
	local title="${1:-TYPES}";
	local opts="${2:-}";
	console title "${title}";
	console header;
	
	#echo "using opts: $opts"
	
	console header;
	console title "STDOUT";
	console header;
	
	console log $opts "a %s message" "log";
	console info $opts "an %s message" "info";
	console ok $opts "an %s message" "ok";
	
	console header;
	console title "STDERR";
	console header;
	
	console debug $opts "a %s message" "debug";
	console warn $opts "a %s message" "warning";
	console error $opts "an %s message" "error";
	console throw $opts "an error message with a stack trace";
	console notok $opts "a %s message" "not ok";
	console header;
	( console quit 127 $opts "a %s message" "quit" );
	( console success $opts "a %s message" "success" );
	
	console header;	
}

# test for using printf
console.test.printf() {
	local title="${1:-PRINTF}";
	local opts="${2:-}";
	local value;
	console title "${title}";
	console header;
	
	console info "a %s value" "string";	
	
	# too many format strongs
	console info "a %s value %s %s" "string";
	
	# hyphenated messages/replacements
	console info -- "-a %s value" "-hyphenated";
	
	# quoting a value, using bash's %q
	console info "a %q value" "quoted value []";
	
	#console info "a %.2f value" "3.1432423434";
	
	#printf "a %.2f value\n" "3.1432423434";
	
	console header;
}

# test displaying a prompt
console.test.prompt() {
	if [ ! -t 0 ] || [ ! -t 1 ]; then
		return 0;
	fi
	
	local title="${1:-PROMPT}";
	local opts="${2:-}";
	local value;
	console title "${title}";
	console header;
	
	# test prompt for comparison
	# read -ep $'\001\033[1m\002bold\001\033[0m\002 prompt'" ${characters[lightning]} " value;
	# local start=$'\001\033[1m\002';
	# local terminator=$'\001\033[0m\002';	
	# local PS9="${start}bold${terminator} prompt ${characters[lightning]} ";
	# read -ep "${PS9}" value;
	
	console prompt "%s prompt" "bright";
	read -ep "$PS9" value;
	console prompt --color=underline "%s prompt" "underline";
	read -ep "$PS9" value;
	
	console prompt --color=black "%s prompt" "black";
	read -ep "$PS9" value;	
	console prompt --color=red "%s prompt" "red";
	read -ep "$PS9" value;
	console prompt --color=green "%s prompt" "green";
	read -ep "$PS9" value;
	console prompt --color=brown "%s prompt" "brown";
	read -ep "$PS9" value;
	console prompt --color=blue "%s prompt" "blue";
	read -ep "$PS9" value;
	console prompt --color=magenta "%s prompt" "magenta";
	read -ep "$PS9" value;
	console prompt --color=cyan "%s prompt" "cyan";
	read -ep "$PS9" value;
	console prompt --color=gray "%s prompt" "gray";
	read -ep "$PS9" value;	
	
	console header;
}

# test custom message
console.test.custom() {
	local title="${1:-CUSTOM}";
	local opts="${2:-}";
	local value;
	console title "${title}";
	console header;

	sprintf --attribute=bright \
		"a %s message %s" "bright";
		
	sprintf --attribute=faint \
		"a %s message %s" "faint";
	sprintf --attribute=italic \
		"a %s message %s" "italic";
		
	sprintf --attribute=underline \
		"an %s message %s" "underline";
		
	sprintf --color=gray --background=magenta \
		"a %s message %s" "custom" "with color gray and background magenta";
	sprintf --color=gray --background=magenta --attribute=negative \
		"a %s message %s" "negative" "with color gray and background magenta";
	sprintf --background=black \
		"a %s message %s" "background" "with a black background and normal text";
		
	console header;
}

# print test messages
console.test() {
	
	console.test.headers;
	console.test.colors;
	console.test.types;
	console.test.printf;
	console.test.custom;
	
	# local tester="${unbound_variable}";
	
	console.test.prompt;
	
	# console.test.types "TYPES (NO PREFIX)" "--no-prefix";

	# console -c "standard message for you ... %s" "abc def ghi";
	# console -n "simple message for you ... %s" "abc";
	# console -n2 "simple error message for you ... %s" "abc";
	# 
	# console -2 --color=red --prefix="[red]" "simple %s message for you ... %s" "warning" "a value for you";
	# console -2 --color=cyan --prefix="[cyan]" "simple %s message for you ... %s" "warning" "a value for you";	
}

if [ $# -eq 0 ]; then
	console.test;
else
	if [ $# -eq 1 ] && [ $1 == "${console_no_color_option}" ]; then
		shift;
		console.test;
		exit 0;
	fi
	console "$@";
fi
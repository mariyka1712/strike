#!/usr/bin/env bash -i

: <<'ronn:markdown'
console(1) -- test program for console(3)
=============================================

## SYNOPSIS

	console [options] message [replacements...]

## DESCRIPTION

Prints messages using ANSI sequences.

## USAGE

When invoked with no options this program prints a series of test messages for console(3). When options are specified they are passed on to console(3).

Run `console help console` to view the console(3) manual.

## EXAMPLES

Print test messages:

	console
	
Print test messages with no ANSI sequences:

	console --no-color

## BUGS

**console** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**console** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

console(3)
ronn:markdown

######################################################################
#
#	BOILERPLATE
#
######################################################################
export exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

# switch on strict mode
process.use strict;

# configure help
require 'help';
help.man.page "default" "console.1";
help.man.page "console" "console.3";
help.man.page "sprintf" "sprintf.3";
help.parse "$@";

require 'opts/version';
version.parse "$@";

# read -ep $'\001\033[1m\002ABC\001\033[0m\002' value;
# exit 0;
# style="\033[1m";
# terminator="\033[0m";
# format="this %b%s%b for you";
# printf -- "$format" "$style" "a message" "$terminator";
# exit 0;

# test header colours
console.test.headers() {
	local title="${1:-HEADER COLORS}";
	local opts="${2:-}";
	console header;	
	console title "${title}";
	console header;
	
	console header $opts --text=black;	
	console header $opts --text=red;
	console header $opts --text=green;
	console header $opts --text=brown;
	console header $opts --text=blue;
	console header $opts --text=magenta;
	console header $opts --text=cyan;
	console header $opts --text=gray;
	
	console header $opts --text=bright-black;	
	console header $opts --text=bright-red;
	console header $opts --text=bright-green;
	console header $opts --text=bright-brown;
	console header $opts --text=bright-blue;
	console header $opts --text=bright-magenta;
	console header $opts --text=bright-cyan;
	console header $opts --text=bright-gray;
	
	console header;
}

# test colors
console.test.colors() {
	local title="${1:-COLORS}";
	console header;
	console title "${title}";
	console header;
	
	console print --text=black "a %s message" "black";
	console print --text=red "a %s message" "red";
	console print --text=green "a %s message" "green";
	console print --text=brown "a %s message" "brown";
	console print --text=blue "a %s message" "blue";
	console print --text=magenta "a %s message" "magenta";
	console print --text=cyan "a %s message" "cyan";
	console print --text=gray "a %s message" "gray";
	
	console print --text=bright-black "a %s message" "bright-black";
	console print --text=bright-red "a %s message" "bright-red";
	console print --text=bright-green "a %s message" "bright-green";
	console print --text=bright-brown "a %s message" "bright-brown";	
	console print --text=bright-blue "a %s message" "bright-blue";
	console print --text=bright-magenta "a %s message" "bright-magenta";
	console print --text=bright-cyan "a %s message" "bright-cyan";
	console print --text=bright-gray "a %s message" "bright-gray";	
	
	console header;
}

# test message types
console.test.types() {
	local title="${1:-TYPES}";
	local opts="${2:-}";
	console title "${title}";
	console header;
	
	#echo "using opts: $opts"
	
	console header;
	console title "STDOUT";
	console header;
	
	console log $opts "a %s message" "log";
	console info $opts "an %s message" "info";
	console ok $opts "an %s message" "ok";
	
	console header;
	console title "STDERR";
	console header;
	
	console debug $opts "a %s message" "debug";
	console warn $opts "a %s message" "warning";
	console error $opts "an %s message" "error";
	console throw $opts "an error message with a stack trace";
	console notok $opts "a %s message" "not ok";
	console header;
	( console quit 127 $opts "a %s message" "quit" );
	( console success $opts "a %s message" "success" );
	
	console header;	
}

# test for using printf
console.test.printf() {
	local title="${1:-PRINTF}";
	local opts="${2:-}";
	local prefix format parameter;
	local pi="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679";
	console title "${title}";
	console header;
	
	# console info "a %k invalid format string" "abc";
	# console info "a %s %q %f value %f %c %s" "string" "quoted value[]" "3.1432423434" "3.123" "x";
	
	# printf ("Characters: %c %c \n", 'a', 65);
	# printf ("Decimals: %d %ld\n", 1977, 650000L);
	# printf ("Preceding with blanks: %10d \n", 1977);
	# printf ("Preceding with zeros: %010d \n", 1977);
	# printf ("Some different radixes: %d %x %o %#x %#o \n", 100, 100, 100, 100, 100);
	# printf ("floats: %4.2f %+.0e %E \n", 3.1416, 3.1416, 3.1416);
	# printf ("Width trick: %*d \n", 5, 10);
	# printf ("%s \n", "A string");	
	
	# literal percent (%%)
	# format="%%";
	# parameter="";
	# prefix=$(sprintf.block "${format}");
	# sprintf --prefix="${prefix}" "printf: ${format} (${format})";	
	
	# literal percent after format specifier (%%)
	format="%d%%";
	parameter="80";
	prefix=$(sprintf.block "${format}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format}%%)" "${parameter}";
	
	#exit 0;
	
	# signed decimal integer (%d)
	format="%d";
	parameter="512";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# signed decimal integer (%i)
	format="%i";
	parameter="1024";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# unsigned octal (%o)
	format="%o";
	parameter="493";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";	
	
	# unsigned hexadecimal integer (%x)
	format="%x";
	parameter="255";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";	
	
	# unsigned hexadecimal integer (%X)
	format="%X";
	parameter="127";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# floating point (%f)
	format="%f";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# floating point (%F)
	format="%F";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# floating point (%.2f)
	format="%.2f";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# scientific notation (mantissa/exponent), lowercase (%e)
	format="%e";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# scientific notation (mantissa/exponent), uppercase (%E)
	format="%E";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# use the shortest representation: %e or %f (%g)
	format="%g";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# use the shortest representation: %E or %F (%G)
	format="%G";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# hexadecimal floating point, lowercase (%a)
	format="%a";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";	
	
	# hexadecimal floating point, uppercase (%A)
	format="%A";
	parameter="${pi}";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
		
	# character (%c)
	format="%c";
	parameter="xyz";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
		
	# string (%s)
	format="%s";
	parameter="string";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# nothing printed (%n)
	format="%n";
	parameter="b8000000";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# BASH
	
	# quoted (%q)
	format="%q";
	parameter="value with spaces []";
	prefix=$(sprintf.block "${format} ${parameter}");
	sprintf --prefix="${prefix}" "printf: ${format} (%${format})" "${parameter}";
	
	# # multiple string replacement
	# console info "a %s value %s more data %%" "string" "with";
	# 
	# # too many format strongs
	# console info "a %s value %s %s" "string";
	# 
	# # hyphenated messages/replacements
	# console info -- "-a %s value" "-hyphenated";
	# 
	# # %f - default precision
	# console info "%f - floating point value (default precision)" "3.1432423434";
	# 
	# # %f - default precision
	# console info "%f - padded floating point value (default precision)" "3.14";
	# 
	# # %f - precision to two decimal places
	# console info "%.2f - floating point value (precision .2)" "3.1432423434";
	# 
	# # quoting a value, using bash's %q
	# console info "a %q - quoted value" "value with spaces []";
	
	console header;
}

# test displaying a prompt
console.test.prompt() {
	if [ ! -t 0 ] || [ ! -t 1 ]; then
		return 0;
	fi
	
	local title="${1:-PROMPT}";
	local opts="${2:-}";
	local value;
	console title "${title}";
	console header;
	
	# test prompt for comparison
	# read -ep $'\001\033[1m\002bold\001\033[0m\002 prompt'" ${characters[lightning]} " value;
	# local start=$'\001\033[1m\002';
	# local terminator=$'\001\033[0m\002';	
	# local PS9="${start}bold${terminator} prompt ${characters[lightning]} ";
	# read -ep "${PS9}" value;
	
	console prompt --program "%s prompt" "program name";
	read -ep "$PS9" value;
	
	console prompt "%s prompt" "bright";
	read -ep "$PS9" value;
	console prompt --text=underline "%s prompt" "underline";
	read -ep "$PS9" value;
	
	console prompt --text=black "%s prompt" "black";
	read -ep "$PS9" value;	
	console prompt --text=red "%s prompt" "red";
	read -ep "$PS9" value;
	console prompt --text=green "%s prompt" "green";
	read -ep "$PS9" value;
	console prompt --text=brown "%s prompt" "brown";
	read -ep "$PS9" value;
	console prompt --text=blue "%s prompt" "blue";
	read -ep "$PS9" value;
	console prompt --text=magenta "%s prompt" "magenta";
	read -ep "$PS9" value;
	console prompt --text=cyan "%s prompt" "cyan";
	read -ep "$PS9" value;
	console prompt --text=gray "%s prompt" "gray";
	read -ep "$PS9" value;
		
	console header;
}

# test custom message
console.test.custom() {
	local title="${1:-CUSTOM}";
	local opts="${2:-}";
	local value;
	console title "${title}";
	console header;

	sprintf --attribute=bright \
		"a %s message" "bright";
		
	sprintf --attribute=faint \
		"a %s message (not widely supported)" "faint";
	sprintf --attribute=italic \
		"an %s message (not widely supported)" "italic";
		
	sprintf --attribute=underline \
		"an %s message" "underline";
		
	sprintf --text=gray --background=magenta \
		"a %s message %s" "custom" "with color gray and background magenta";
	sprintf --text=gray --background=magenta --attribute=negative \
		"a %s message %s" "negative" "with color gray and background magenta";
	sprintf --background=black \
		"a %s message %s" "background" "with a black background and normal text";
		
	sprintf --text0=cyan \
		--background0=black --attribute1=underline \
		--attribute2=bright \
		--attribute3=blink \
		"a message with %s %s %s that can %s <- %s" \
			"custom" "parameter" "styles" "blink" "that's dangerous";
			
	# --text=blue 
		
	console header;
}

# test miscellanous functionality
console.test.misc() {
	local title="${1:-MISCELLANEOUS}";
	local opts="${2:-}";
	local value;
	console title "${title}";
	console header;
	
	# command for generating a
	# custom message prefix
	user.hostname() {
		local id=$( id -nu );
		local host=$( hostname );
		local str="${id}@${host}";
		local begin=$( sprintf.block "$str" );
		if [ -n "${prefix:-}" ]; then
			begin="${begin} ${prefix}";
		fi
		prefix="${begin}";
	}

	sprintf --program \
		"a message %s" "prefixed with the program name";
		
	console info --program \
		"an %s message %s" "info" "prefixed with the program name";
		
	console info --date \
		"an %s message %s" "info" "prefixed with the date";	
		
	console info --timestamp \
		"an %s message %s" "info" "prefixed with a timestamp";
		
	console info --timestamp \
		--program \
		"an %s message %s" "info" "prefixed with a timestamp and program name";
		
	console print --prefix-command="user.hostname" -- \
		"a message %s using %s" "with a custom prefix" "--prefix-command";
		
	console header;
}

# print test messages
console.test() {
	
	#console error --debug "a message";
	
	#exit 0;
	
	# sprintf --attribute=bright --debug \
	# 	"a %s message" "bright";
	# 	
	# exit 0;	
	# 
	
	sprintf --prefix="[prefix]" --color=never -- "message %s %.2f" "for you" "3.1445656";	
	
	sprintf --text=red -- "message %s" "for you";
	
	sprintf --prefix="[prefix]" --text=red -- "message %s with some extra text" "for you";
	
	sprintf --text=red -- "message";
	
	#exit 0;	
		
	# sprintf -2 --text=red --prefix="[trace]" \
	# 	"%s:%s %s" "file" "line" "method";	
	
		
	sprintf -2 --text=red --prefix="[trace]" \
		"%s:%s" "file" "line";
	#exit 0;
	
	#console throw "an error message with a stack trace";
	#exit 0;

	
	console.test.headers;
	console.test.colors;
	console.test.types;
	console.test.printf;
	console.test.custom;
	console.test.misc;
	console.test.prompt;
	
	# local tester="${unbound_variable}";
}

if [ $# -eq 0 ]; then
	console.test;
else
	if [ $# -eq 1 ] && [ $1 == "${console_no_color_option}" ]; then
		shift;
		console.test;
		exit 0;
	fi
	sprintf "$@";
fi
#!/usr/bin/env bash
# #!/bin/bash.3.2.48

: <<'ronn:markdown'
strike(1) -- require(3) for bash
=============================================

## SYNOPSIS

Utility program for inspecting information about the system and bash installation.

## DESCRIPTION

The strike(1) program also provides debugging commands and the ability to switch the installed bash version.

## COMMANDS

The strike(1) supports the following commands:

* `info`:
	Print system information.
	
* `pkg`:
	Print npm(1) package information.
	
* `module.dirs`:
	Print a module search path directories.	
	
* `module.list`:
	Print a module list.
	
* `method.list`:
	Print method names.
	
* `dirs`:
	Print program directories.
	
* `lib.dirs`:
	Print library directories.

## BUGS

**strike** is written in bash and depends upon `bash` >= 4 for associative arrays.

## COPYRIGHT

**strike** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

bake(1)
ronn:markdown

set -o errtrace;
set -o errexit;
set -o nounset;

#dirs -p
#popd /

######################################################################
#
#	BOILERPLATE
#
######################################################################
console_print_program_prefix="off";
declare -gx exedir;
function boilerplate {
	local abspath=$(cd ${BASH_SOURCE[0]%/*} && echo $PWD/${0##*/});
	if [ -L "$abspath" ]; then abspath=`readlink $abspath`; fi
	if [[ "$abspath" =~ ^\./ ]]; then abspath="${PWD}/${abspath}"; fi
	exedir=`dirname "$abspath"`;
	local libdir="$exedir/../lib";
	source "$libdir/shared" "$@";
}
boilerplate "$@";
######################################################################

# set up the main delegate module as 'strike'
module="$process_name";

# configure help
require 'help';
help.man.page "default" "strike.1";
help.parse "$@";

require 'tasks/npm';

function strike.info {
	system.print;
}

function strike.dirs {
	system.dirs;
}

function strike.lib.dirs {
	system.lib.dirs;
}

function strike.module.list {
	require.list;
}

function strike.module.dirs {
	require.dirs;
}

function strike.method.list {
	method.list;
}

function strike.pkg {
	tasks.npm.package.print;
}

# configure options
require 'options';

options_minimum=1;
options_fail_help=1;
options_expects_command=( info dirs pkg lib.dirs module.dirs module.list method.list );
options_map_command_method=1;
#configure all the option defaults
options configure;
#parse the parameters
options parse "$@";

delegate "${module:-}" "${options_command_method:-}" "${module_options[@]:-}";
exit 0;
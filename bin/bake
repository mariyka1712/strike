#!/usr/bin/env bash

set -o errtrace;
set -o errexit;
set -o nounset;

######################################################################
#
#	BOILERPLATE
#
######################################################################
export PROGRAM_NAME=`basename $0`;
program_config_print_welcome="off";
program_config_print_prefix="off";
name=`basename $0`;
abspath=$(cd ${BASH_SOURCE[0]%/*} && echo $PWD/${0##*/});
if [ -L "$abspath" ]; then
	abspath=`readlink $abspath`;
fi
exedir=`dirname "$abspath"`;
libdir="$exedir/../lib";
source "$libdir/shared";
######################################################################

# TODO: add version handling

function usage {
	echo "$PROGRAM_NAME task [options]";
}

if [ $# -eq 0 ]; then
	usage;
	exit 1;
fi

export filename="tasks";
function bake {
	local f="${PWD}/${filename}";
	if [ ! -f "$f" ]; then
		quit 1 "nothing to build";
	else
		# variables to expose to the task(s)
		local root=`dirname $f`;
		local target="${root}/target";
		local tasks="$f";
	
		declare -A build;
		build[root]="$root";
		build[target]="$target";
		build[tasks]="$f";
		
		require "$f";
		local cmd="$1";
		shift;
		local func="tasks.${cmd}";
		method.exists "$func";
		if [ $? -ne 0 ]; then
			quit 2 "task %s not found" "$cmd";
		fi
		
		# switch back strict error checking
		set -o errexit;
		#invoked the task function
		$func "$@" || quit 3 "task %s failed" "$func";
	fi
}

bake "$@";
#!/usr/bin/env bash

: <<'ronn:markdown'
bake(1) -- make for bash
=============================================

## SYNOPSIS

`bake` command [<options>...]<br>

## DESCRIPTION

**bake** is `make` for bash programs. It provides an extensible system for managing project tasks using modular code. If bake(1) is invoked with no command then the `man` page for bake(1) is displayed, which is the equivalent of `bake help`.

It maps commands (the first option passed to bake(1)) to task method(s) declared by a tasks(7) file. A command is considered to be the first option passed to the `bake` executable, any other options specified on the command line are passed to the corresponding task method.
	
## BUILTIN TASKS

All bake(1) projects have the following tasks built in task-test(7), task-clean(7), task-ls(7), task-doc(7) and task-semver(7).

## REQUIRE TASKS

The convention is that task methods are not declared in tasks(7) but are placed in modules and then included using require(3). So to include the task-todo(7) functionality into your project all you need to do is require(3) it:

	require 'tasks/todo';
	
## HELP

To view the bake(1) `man` page, the following commands are equivalent:

	bake
	bake help
	
To view `man` pages for the built in tasks use:

	bake help ls
	bake help clean
	bake help test
	bake help doc
	bake help semver	

## FILES

The bake(1) program looks for a tasks(7) file in the current working directory. If no tasks(7) file is found in the current working directory then bake(1) will walk all parent directories looking for a tasks(7) file.

## ENVIRONMENT

The following variables are available to each command method:

* `root`:
	The directory where the `tasks` file is located.

* `target`:
	A temporary `target` directory corresponding to `${root}/target`.
	
* `tasks`:
	The file system path to the tasks file, eg: `${root}/tasks`.
	
## EXIT CODES

A >0 exit code is used when no task(7) file could be located or no command is available, otherwise the exit code is deferred to the task being executed.

* `1`:
	No task(7) file available in the current working directory (or any parent directories).
* `2`:
	No task command available.
* `>0`:
	The task command invocation returned a non-zero exit code but did not explicitly call `exit`.
	
It is recommended that task command implementations explicitly exit the program using the `quit` and `success` commands declared by console(3).

## BUGS

**bake** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**bake** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

require(3), tasks(7), task-semver(7), task-test(7), task-doc(7), task-clean(7), task-ls(7)
ronn:markdown

set -o errtrace;
set -o errexit;
set -o nounset;

# empty?() {
# 	echo "empty? called...";
# }
# 
# empty?;
# 
# function empty!()
# {
# 	echo "empty! called...";
# }
# 
# empty!;
# 
# exit 0;

######################################################################
#
#	BOILERPLATE
#
######################################################################
console_print_program_prefix="off";
declare -gx exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

# switch on strict mode
process.use strict;

# keys="c
# b
# a";
# 
# sort <<< "$keys";
# 
# exit 0;


# arr=( 1 2 3 );
# 
# index=0;
# while [ ${#arr[@]} -gt 0 ];
# 	do
# 		echo "removed : ${!arr[@]} : ${#arr[@]}";
# 		unset arr[$index];
# 		: $((index++));
# done
# 
# exit 0;

# len()
# {
# 	echo "$# : $@";
# }
# 
# len a;
# 
# len a\ b;
# 
# exit 0;

#require.once 'attr';

# attr.reader;
# attr.reader a b c;

# attr.reader :abc.reader "abc";
# 
# #attr.writer;
# #attr.writer a b c;
# # attr.writer :abc.writer;
# # 
# # #attr.accessor :abc.readwrite;
# # 
# # method.list | grep abc;
# 
# abc.reader;
# echo "after reader: '$_result'";
# # env | grep abc;
# 
# #attr.accessor;
# 
# exit 0;

# "version": "0.1.1"

# require.once 'json';
# 
# pkgwrite() {
# 	
# 	# json.parse
# 	
# 	local str=`cat package.json`;
# 	# :\s?\"([^\"]+)\"
# 	local regexp="\"version\"[ 	]{0,}:[ 	]*\"";
# 	echo "regexp: '$regexp'";
# 	echo "got source: $str";
# 	str=${str/$regexp/abc};
# 	echo "matches: ${!BASH_REMATCH[@]}"
# 	echo "got replaced: $str";
# 	
# 	#sed 'PATTERNs/REGEXP/REPLACEMENT/FLAGS' filename	
# 	
# 	# local regexp="(\"version\"[ 	]*:[ 	]*\")[^\"]+(\")";
# 	# local replace="\1abc\2";
# 	# sed -E "s/$regexp/$replace/g" "package.json";
# }
# 
# pkgwrite;
# 
# exit 0;

# version() {
# 	local file="${process_dirs[root]}/version";
# 	local semver=$( cat "$file" );
# 	console.info "version %s" "$semver";
# }
# version;
# 
# exit 0;

# if method.exists? "return"; then
# 	echo "return command exists";
# fi

# function del {
# 	echo "del called"
# }
# 
# declare -g del="abc";
# 
# del;
# echo "$del";
# exit 0;

# require 'git';
# git.branch.message;
# echo "$_result";
# git.branch.message master;
# echo "$_result";
# exit 0;

#declare -f -F;

#exit 0;

#alias "_return=return";

# function return {
# 	local exitcode="${2:-0}";
# 	if [[ "$1" =~ ^[0-9]+$ ]]; then
# 		echo "return called with number $1";
# 		builtin return $exitcode;
# 	else
# 		_result="$1";
# 		echo "return called with alpha $1";
# 		builtin return $exitcode;
# 	fi
# }
# 
# function method.alpha {
# 	return "$1";
# }
# 
# function method.number {
# 	return "$1";
# }
# 
# function method.alpha.branch {
# 	return "$1" && builtin return;
# 	echo "$FUNCNAME";
# }
# 
# #alias "return=method.return";
# 
# method.alpha "abc";
# method.number "0";
# method.alpha.branch "abcdef";
# 
# exit 0;

# process.on exit trap;
# 
# #process.off trap;
# 
# #console.quit;
# 
# kill -s trap $$;
# 
# exit 1;

#json_number_regexp="^-?[0-9]+((\.[0-9]+)?([eE][-+]?[0-9]+)?)?$";

# # valid
# if [[ "-1" =~ $json_number_regexp ]]; then
# 	echo "got simple negative integer match ... ";
# fi
# 
# if [[ "127" =~ $json_number_regexp ]]; then
# 	echo "got simple positive integer match ... ";
# fi
# 
# if [[ "3.14" =~ $json_number_regexp ]]; then
# 	echo "got fraction match ... ";
# fi
# 
# if [[ "-3.14" =~ $json_number_regexp ]]; then
# 	echo "got negative fraction match ... ";
# fi
# 
# if [[ "2e10" =~ $json_number_regexp ]]; then
# 	echo "got integer exponent ... ";
# fi
# 
# if [[ "2e-10" =~ $json_number_regexp ]]; then
# 	echo "got integer negative exponent ... ";
# fi
# 
# if [[ "2e+10" =~ $json_number_regexp ]]; then
# 	echo "got integer positive exponent ... ";
# fi
# 
# if [[ "3.14e10" =~ $json_number_regexp ]]; then
# 	echo "got fraction exponent ... ";
# fi
# 
# if [[ "3.14e-10" =~ $json_number_regexp ]]; then
# 	echo "got fraction negative exponent ... ";
# fi
# 
# if [[ "3.14e+10" =~ $json_number_regexp ]]; then
# 	echo "got fraction positive exponent ... ";
# fi
# 
# if [[ "3.14E+10" =~ $json_number_regexp ]]; then
# 	echo "got fraction uppercase positive exponent ... ";
# fi
# 
# # invalid
# if [[ "-3." =~ $json_number_regexp ]]; then
# 	echo "got trailing period matach (error) ... ";
# fi
# 
# exit 0;

# process.pid;

# notok() {
# 	return 1;
# }
# 
# ok() {
# 	return 0;
# }
# 
# if ok; then
# 	echo "everything ok...";
# fi
# 
# if notok; then
# 	echo "everything is not ok...";
# fi
# 
# echo "got to end of test..."
# exit 0;

# arr=(a b c);

# if array.contains? "a" "${arr[@]}" && array.contains? "b" "${arr[@]}"; then
# 	echo "array contains a and b";
# fi
# 
# if array.contains? "a" "${arr[@]}" || array.contains? "b" "${arr[@]}"; then
# 	echo "array contains a or b";
# fi
# 
# if ! array.contains? "d" "${arr[@]}"; then
# 	echo "array does not contain d";
# fi
# 
# echo "got to end of test..."
# exit 0;

# console.info "this is an info message";
# console.log.stdout "./target/test.log";
# console.info "this is a log file message";
# console.log.stdout.close;
# console.info "this is a message after log file close";
# 
# exit 0;

# console.log.stderr.close;

# console.error "this is an error message";
# console.log.stderr "./target/test.log";
# console.error "this is an error log file message";
# console.log.stderr.close;
# console.error "this is an error message after log file close";
# 
# exit 0;

# function :accessor {
# 	echo ":accessor called ... ";
# }
# 
# :accessor;

# configure help
require 'help';
help.man.page "default" "bake.1";
# register build in man pages
help.man.page "clean" "task-clean.7";
help.man.page "ls" "task-ls.7";
help.man.page "doc" "task-doc.7";
help.man.page "semver" "task-semver.7";
help.man.page "test" "task-test.7";

# TODO: add --version handling

if [ $# -eq 0 ]; then
	help.man.show.default;
	exit 1;
fi

# default builtin tasks
require 'tasks/test';
require 'tasks/clean';
require 'tasks/ls';
require 'tasks/doc';
require 'tasks/semver';

function bake {
	local nm="tasks";
	fs.walk "$nm";
	local f="$_result";
	if [ ! -f "$f" ]; then
		quit 1 "no %s file in %s (or any of the parent directories)" "$nm" "${PWD}";
	else
		# variables to expose to the task(s)
		local root=`dirname $f`;
		local target="${root}/target";
		local tasks="$f";
		
		if [ ! -d "${target}" ]; then
			mkdir -p "${target}";
		fi
		
		require "$f";
		
		# parse help information after requiring the tasks(7)
		# file so that modules, may map their own help man pages
		help.parse "$@";
		
		local cmd="$1";
		shift;
		local func="${nm}.${cmd}";
		if ! method.exists? "$func"; then
			quit 2 "task %s not found" "$cmd";
		fi
		
		# invoke the task function
		delegate "tasks" "$cmd" "$@" || quit $? "task %s failed" "$func";
	fi
}

bake "$@";
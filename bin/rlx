#!/usr/bin/env bash

: <<'ronn:markdown'
rlx(1) -- couchdb command line interface
=============================================

## SYNOPSIS

A command line interface for couchdb(7).

## DESCRIPTION

Allows manipulation and querying of couchdb(7) databases from the command line.

## USAGE

	rlx command [options...]
	
## FILES

The rlx(1) program stores various configuration files in `$HOME/.rlx`.
	
## DEPENDENCIES

openssl(1), curl(1), tee(1)

## BUGS

**rlx** is written in bash and depends upon `bash` >= 4.2.

## COPYRIGHT

**rlx** is copyright (c) 2012 muji <http://xpm.io>

## SEE ALSO

couchdb(3), http(3), json(3), curl(1)
ronn:markdown

set -o errtrace;
set -o errexit;
set -o nounset;

######################################################################
#
#	BOILERPLATE
#
######################################################################
console_print_program_prefix="off";
declare -g exedir;
function boilerplate {
	local src="${BASH_SOURCE[0]}"
	exedir="$( dirname "$src" )"
	while [ -h "$src" ]
		do 
			src="$(readlink "$src")";
			[[ $src != /* ]] && src="$exedir/$src";
			exedir="$( cd -P "$( dirname "$src"  )" && pwd )";
	done
	exedir="$( cd -P "$( dirname "$src" )" && pwd )";
	unset src;
	source "$exedir/../lib/shared" "$@";
}
boilerplate "$@";
######################################################################

# switch on strict mode
process.use strict;

# configure help
require 'help';
help.man.page "default" "rlx.1";
help.parse "$@";

# if [ $# -eq 0 ]; then
# 	help.man.show.default;
# 	exit 0;
# fi

rlx_home="$HOME/.rlx";

function rlx.init {
	local db="db";
	local keys="keys";
	local log="log";
	local dir subdirs=( "$keys" "$db" "$log" );
	# create main storage directory
	mkdir -p "$rlx_home" \
		|| console.quit 1 "could not create %s" "$rlx_home";
	if [ -d "$rlx_home" ]; then
		console.info "created %s" "$rlx_home";
	fi
	# create required sub-directories
	for dir in "${subdirs[@]}"
		do
			dir="${rlx_home}/${dir}";
			mkdir -p "$dir" \
				|| console.quit 1 "could not create %s" "$dir";
			if [ -d "$dir" ]; then
				console.info "created %s" "$dir";
			fi
	done
	local keylogfile="${rlx_home}/${log}/keygen.log";
	local keydir="${rlx_home}/$keys";
	local keypair="${keydir}/rlx.pem";
	local keypublic="${keydir}/rlx.pub";
	# generate the keypair and public key
	crypto.rsa.generate false 2048 "$keypair" "$keypublic" "$keylogfile" \
		|| console.quit 1 "failed to generate private/public key pair";
	chmod -R 700 "$keydir" || console.quit 1 "could not change permissions on %s" "$keydir";
	if [ -f "$keypair" ]; then
		console.info "generated public/private keypair %s" "$keypair";
	fi
	if [ -f "$keypublic" ]; then
		console.info "generated public key file %s" "$keypublic";
	fi
	return 0;
}

function rlx.firstrun? {
	test -d "$rlx_home";
}

function rlx {
	# we need these executables so test early
	executable.validate openssl curl tee;
	
	# dependencies
	require 'inet';
	require 'couchdb';
	require 'crypto';
	
	if ! rlx.firstrun?; then
		rlx.init;
	fi
	
	# TODO: get this from a --host option
	local host="ffsys.cloudant.com";
	local protocol="http://";
	
	# TODO: only run this test when the host is not
	# TODO: localhost or 127.0.0.1
	
	set +e;
	# TODO: change this to use curl(1) for inet validation
	inet.up? "$host";
	if [ $? -gt 0 ]; then
		console.quit 1 "could not connect to %s %s" "$host" "✘";
	fi
	set -e;

	console.info "%s ok %s" "$host" "✓";
	
	local cmd="${1:-}";
	
	#delegate "couchdb" "$cmd" "$@" || quit $? "task %s failed" "$func";
}

rlx "$@";